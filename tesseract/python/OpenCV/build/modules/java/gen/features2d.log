ok: class CLASS ::.Features2d : , name: Features2d, base: 


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/features2d/misc/java/src/cpp/features2d_manual.hpp =====
Namespaces: set([u'cv'])

--- Incoming ---
[u'class cv.javaFeatureDetector', '', [u'=FeatureDetector'], []]
ok: class CLASS cv::.javaFeatureDetector : , name: javaFeatureDetector, base: 

--- Incoming ---
[   u'cv.javaFeatureDetector.detect',
    u'void',
    [],
    [   [u'Mat', u'image', u'', []],
        [u'vector_KeyPoint', u'keypoints', u'', ['/O']],
        [u'Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv.javaFeatureDetector.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.javaFeatureDetector.detect',
    u'void',
    [],
    [   [u'vector_Mat', u'images', u'', []],
        [u'vector_vector_KeyPoint', u'keypoints', u'', ['/O']],
        [u'vector_Mat', u'masks', u'std::vector<Mat>()', []]],
    u'void']
ok: FUNC <void cv.javaFeatureDetector.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=std::vector<Mat>()]>

--- Incoming ---
[u'cv.javaFeatureDetector.empty', u'bool', [], [], u'bool']
ok: FUNC <bool cv.javaFeatureDetector.empty []>

--- Incoming ---
[u'const cv.javaFeatureDetector.FAST', u'1', [], []]
ok: CONST FAST=1

--- Incoming ---
[u'const cv.javaFeatureDetector.STAR', u'2', [], []]
ok: CONST STAR=2

--- Incoming ---
[u'const cv.javaFeatureDetector.SIFT', u'3', [], []]
ok: CONST SIFT=3

--- Incoming ---
[u'const cv.javaFeatureDetector.SURF', u'4', [], []]
ok: CONST SURF=4

--- Incoming ---
[u'const cv.javaFeatureDetector.ORB', u'5', [], []]
ok: CONST ORB=5

--- Incoming ---
[u'const cv.javaFeatureDetector.MSER', u'6', [], []]
ok: CONST MSER=6

--- Incoming ---
[u'const cv.javaFeatureDetector.GFTT', u'7', [], []]
ok: CONST GFTT=7

--- Incoming ---
[u'const cv.javaFeatureDetector.HARRIS', u'8', [], []]
ok: CONST HARRIS=8

--- Incoming ---
[u'const cv.javaFeatureDetector.SIMPLEBLOB', u'9', [], []]
ok: CONST SIMPLEBLOB=9

--- Incoming ---
[u'const cv.javaFeatureDetector.DENSE', u'10', [], []]
ok: CONST DENSE=10

--- Incoming ---
[u'const cv.javaFeatureDetector.BRISK', u'11', [], []]
ok: CONST BRISK=11

--- Incoming ---
[u'const cv.javaFeatureDetector.AKAZE', u'12', [], []]
ok: CONST AKAZE=12

--- Incoming ---
[u'const cv.javaFeatureDetector.GRIDDETECTOR', u'1000', [], []]
ok: CONST GRIDDETECTOR=1000

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_FAST', u'GRIDDETECTOR + FAST', [], []]
ok: CONST GRID_FAST=GRIDDETECTOR + FAST

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_STAR', u'GRIDDETECTOR + STAR', [], []]
ok: CONST GRID_STAR=GRIDDETECTOR + STAR

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_SIFT', u'GRIDDETECTOR + SIFT', [], []]
ok: CONST GRID_SIFT=GRIDDETECTOR + SIFT

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_SURF', u'GRIDDETECTOR + SURF', [], []]
ok: CONST GRID_SURF=GRIDDETECTOR + SURF

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_ORB', u'GRIDDETECTOR + ORB', [], []]
ok: CONST GRID_ORB=GRIDDETECTOR + ORB

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_MSER', u'GRIDDETECTOR + MSER', [], []]
ok: CONST GRID_MSER=GRIDDETECTOR + MSER

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_GFTT', u'GRIDDETECTOR + GFTT', [], []]
ok: CONST GRID_GFTT=GRIDDETECTOR + GFTT

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_HARRIS', u'GRIDDETECTOR + HARRIS', [], []]
ok: CONST GRID_HARRIS=GRIDDETECTOR + HARRIS

--- Incoming ---
[   u'const cv.javaFeatureDetector.GRID_SIMPLEBLOB',
    u'GRIDDETECTOR + SIMPLEBLOB',
    [],
    []]
ok: CONST GRID_SIMPLEBLOB=GRIDDETECTOR + SIMPLEBLOB

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_DENSE', u'GRIDDETECTOR + DENSE', [], []]
ok: CONST GRID_DENSE=GRIDDETECTOR + DENSE

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_BRISK', u'GRIDDETECTOR + BRISK', [], []]
ok: CONST GRID_BRISK=GRIDDETECTOR + BRISK

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_AKAZE', u'GRIDDETECTOR + AKAZE', [], []]
ok: CONST GRID_AKAZE=GRIDDETECTOR + AKAZE

--- Incoming ---
[u'const cv.javaFeatureDetector.PYRAMIDDETECTOR', u'2000', [], []]
ok: CONST PYRAMIDDETECTOR=2000

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_FAST',
    u'PYRAMIDDETECTOR + FAST',
    [],
    []]
ok: CONST PYRAMID_FAST=PYRAMIDDETECTOR + FAST

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_STAR',
    u'PYRAMIDDETECTOR + STAR',
    [],
    []]
ok: CONST PYRAMID_STAR=PYRAMIDDETECTOR + STAR

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_SIFT',
    u'PYRAMIDDETECTOR + SIFT',
    [],
    []]
ok: CONST PYRAMID_SIFT=PYRAMIDDETECTOR + SIFT

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_SURF',
    u'PYRAMIDDETECTOR + SURF',
    [],
    []]
ok: CONST PYRAMID_SURF=PYRAMIDDETECTOR + SURF

--- Incoming ---
[u'const cv.javaFeatureDetector.PYRAMID_ORB', u'PYRAMIDDETECTOR + ORB', [], []]
ok: CONST PYRAMID_ORB=PYRAMIDDETECTOR + ORB

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_MSER',
    u'PYRAMIDDETECTOR + MSER',
    [],
    []]
ok: CONST PYRAMID_MSER=PYRAMIDDETECTOR + MSER

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_GFTT',
    u'PYRAMIDDETECTOR + GFTT',
    [],
    []]
ok: CONST PYRAMID_GFTT=PYRAMIDDETECTOR + GFTT

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_HARRIS',
    u'PYRAMIDDETECTOR + HARRIS',
    [],
    []]
ok: CONST PYRAMID_HARRIS=PYRAMIDDETECTOR + HARRIS

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_SIMPLEBLOB',
    u'PYRAMIDDETECTOR + SIMPLEBLOB',
    [],
    []]
ok: CONST PYRAMID_SIMPLEBLOB=PYRAMIDDETECTOR + SIMPLEBLOB

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_DENSE',
    u'PYRAMIDDETECTOR + DENSE',
    [],
    []]
ok: CONST PYRAMID_DENSE=PYRAMIDDETECTOR + DENSE

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_BRISK',
    u'PYRAMIDDETECTOR + BRISK',
    [],
    []]
ok: CONST PYRAMID_BRISK=PYRAMIDDETECTOR + BRISK

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_AKAZE',
    u'PYRAMIDDETECTOR + AKAZE',
    [],
    []]
ok: CONST PYRAMID_AKAZE=PYRAMIDDETECTOR + AKAZE

--- Incoming ---
[u'const cv.javaFeatureDetector.DYNAMICDETECTOR', u'3000', [], []]
ok: CONST DYNAMICDETECTOR=3000

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_FAST',
    u'DYNAMICDETECTOR + FAST',
    [],
    []]
ok: CONST DYNAMIC_FAST=DYNAMICDETECTOR + FAST

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_STAR',
    u'DYNAMICDETECTOR + STAR',
    [],
    []]
ok: CONST DYNAMIC_STAR=DYNAMICDETECTOR + STAR

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_SIFT',
    u'DYNAMICDETECTOR + SIFT',
    [],
    []]
ok: CONST DYNAMIC_SIFT=DYNAMICDETECTOR + SIFT

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_SURF',
    u'DYNAMICDETECTOR + SURF',
    [],
    []]
ok: CONST DYNAMIC_SURF=DYNAMICDETECTOR + SURF

--- Incoming ---
[u'const cv.javaFeatureDetector.DYNAMIC_ORB', u'DYNAMICDETECTOR + ORB', [], []]
ok: CONST DYNAMIC_ORB=DYNAMICDETECTOR + ORB

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_MSER',
    u'DYNAMICDETECTOR + MSER',
    [],
    []]
ok: CONST DYNAMIC_MSER=DYNAMICDETECTOR + MSER

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_GFTT',
    u'DYNAMICDETECTOR + GFTT',
    [],
    []]
ok: CONST DYNAMIC_GFTT=DYNAMICDETECTOR + GFTT

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_HARRIS',
    u'DYNAMICDETECTOR + HARRIS',
    [],
    []]
ok: CONST DYNAMIC_HARRIS=DYNAMICDETECTOR + HARRIS

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_SIMPLEBLOB',
    u'DYNAMICDETECTOR + SIMPLEBLOB',
    [],
    []]
ok: CONST DYNAMIC_SIMPLEBLOB=DYNAMICDETECTOR + SIMPLEBLOB

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_DENSE',
    u'DYNAMICDETECTOR + DENSE',
    [],
    []]
ok: CONST DYNAMIC_DENSE=DYNAMICDETECTOR + DENSE

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_BRISK',
    u'DYNAMICDETECTOR + BRISK',
    [],
    []]
ok: CONST DYNAMIC_BRISK=DYNAMICDETECTOR + BRISK

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_AKAZE',
    u'DYNAMICDETECTOR + AKAZE',
    [],
    []]
ok: CONST DYNAMIC_AKAZE=DYNAMICDETECTOR + AKAZE

--- Incoming ---
[   u'cv.javaFeatureDetector.create',
    u'Ptr_javaFeatureDetector',
    ['/S'],
    [[u'int', u'detectorType', u'', []]],
    u'Ptr<javaFeatureDetector>']
ok: FUNC <Ptr_javaFeatureDetector cv.javaFeatureDetector.create [ARG int detectorType=]>

--- Incoming ---
[   u'cv.javaFeatureDetector.write',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaFeatureDetector.write [ARG String fileName=]>

--- Incoming ---
[   u'cv.javaFeatureDetector.read',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaFeatureDetector.read [ARG String fileName=]>

--- Incoming ---
[u'class cv.javaDescriptorExtractor', '', [u'=DescriptorExtractor'], []]
ok: class CLASS cv::.javaDescriptorExtractor : , name: javaDescriptorExtractor, base: 

--- Incoming ---
[   u'cv.javaDescriptorExtractor.compute',
    u'void',
    [],
    [   [u'Mat', u'image', u'', []],
        [u'vector_KeyPoint', u'keypoints', u'', ['/IO']],
        [u'Mat', u'descriptors', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorExtractor.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>

--- Incoming ---
[   u'cv.javaDescriptorExtractor.compute',
    u'void',
    [],
    [   [u'vector_Mat', u'images', u'', []],
        [u'vector_vector_KeyPoint', u'keypoints', u'', ['/IO']],
        [u'vector_Mat', u'descriptors', u'', ['/O']]],
    u'void']
ok: FUNC <void cv.javaDescriptorExtractor.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>

--- Incoming ---
[u'cv.javaDescriptorExtractor.descriptorSize', u'int', [], [], u'int']
ok: FUNC <int cv.javaDescriptorExtractor.descriptorSize []>

--- Incoming ---
[u'cv.javaDescriptorExtractor.descriptorType', u'int', [], [], u'int']
ok: FUNC <int cv.javaDescriptorExtractor.descriptorType []>

--- Incoming ---
[u'cv.javaDescriptorExtractor.empty', u'bool', [], [], u'bool']
ok: FUNC <bool cv.javaDescriptorExtractor.empty []>

--- Incoming ---
[u'const cv.javaDescriptorExtractor.SIFT', u'1', [], []]
ok: CONST SIFT=1

--- Incoming ---
[u'const cv.javaDescriptorExtractor.SURF', u'2', [], []]
ok: CONST SURF=2

--- Incoming ---
[u'const cv.javaDescriptorExtractor.ORB', u'3', [], []]
ok: CONST ORB=3

--- Incoming ---
[u'const cv.javaDescriptorExtractor.BRIEF', u'4', [], []]
ok: CONST BRIEF=4

--- Incoming ---
[u'const cv.javaDescriptorExtractor.BRISK', u'5', [], []]
ok: CONST BRISK=5

--- Incoming ---
[u'const cv.javaDescriptorExtractor.FREAK', u'6', [], []]
ok: CONST FREAK=6

--- Incoming ---
[u'const cv.javaDescriptorExtractor.AKAZE', u'7', [], []]
ok: CONST AKAZE=7

--- Incoming ---
[u'const cv.javaDescriptorExtractor.OPPONENTEXTRACTOR', u'1000', [], []]
ok: CONST OPPONENTEXTRACTOR=1000

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_SIFT',
    u'OPPONENTEXTRACTOR + SIFT',
    [],
    []]
ok: CONST OPPONENT_SIFT=OPPONENTEXTRACTOR + SIFT

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_SURF',
    u'OPPONENTEXTRACTOR + SURF',
    [],
    []]
ok: CONST OPPONENT_SURF=OPPONENTEXTRACTOR + SURF

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_ORB',
    u'OPPONENTEXTRACTOR + ORB',
    [],
    []]
ok: CONST OPPONENT_ORB=OPPONENTEXTRACTOR + ORB

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_BRIEF',
    u'OPPONENTEXTRACTOR + BRIEF',
    [],
    []]
ok: CONST OPPONENT_BRIEF=OPPONENTEXTRACTOR + BRIEF

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_BRISK',
    u'OPPONENTEXTRACTOR + BRISK',
    [],
    []]
ok: CONST OPPONENT_BRISK=OPPONENTEXTRACTOR + BRISK

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_FREAK',
    u'OPPONENTEXTRACTOR + FREAK',
    [],
    []]
ok: CONST OPPONENT_FREAK=OPPONENTEXTRACTOR + FREAK

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_AKAZE',
    u'OPPONENTEXTRACTOR + AKAZE',
    [],
    []]
ok: CONST OPPONENT_AKAZE=OPPONENTEXTRACTOR + AKAZE

--- Incoming ---
[   u'cv.javaDescriptorExtractor.create',
    u'Ptr_javaDescriptorExtractor',
    ['/S'],
    [[u'int', u'extractorType', u'', []]],
    u'Ptr<javaDescriptorExtractor>']
ok: FUNC <Ptr_javaDescriptorExtractor cv.javaDescriptorExtractor.create [ARG int extractorType=]>

--- Incoming ---
[   u'cv.javaDescriptorExtractor.write',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorExtractor.write [ARG String fileName=]>

--- Incoming ---
[   u'cv.javaDescriptorExtractor.read',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorExtractor.read [ARG String fileName=]>

--- Incoming ---
[u'const cv.DRAW_OVER_OUTIMG', u'1', [], []]
ok: CONST DRAW_OVER_OUTIMG=1

--- Incoming ---
[u'const cv.NOT_DRAW_SINGLE_POINTS', u'2', [], []]
ok: CONST NOT_DRAW_SINGLE_POINTS=2

--- Incoming ---
[u'const cv.DRAW_RICH_KEYPOINTS', u'4', [], []]
ok: CONST DRAW_RICH_KEYPOINTS=4

--- Incoming ---
[   u'cv.drawMatches',
    u'void',
    [u'=drawMatches2'],
    [   [u'Mat', u'img1', u'', []],
        [u'vector_KeyPoint', u'keypoints1', u'', []],
        [u'Mat', u'img2', u'', []],
        [u'vector_KeyPoint', u'keypoints2', u'', []],
        [u'vector_vector_DMatch', u'matches1to2', u'', []],
        [u'Mat', u'outImg', u'', []],
        [u'Scalar', u'matchColor', u'Scalar::all(-1)', []],
        [u'Scalar', u'singlePointColor', u'Scalar::all(-1)', []],
        [   u'vector_vector_char',
            u'matchesMask',
            u'std::vector<std::vector<char> >()',
            []],
        [u'int', u'flags', u'0', []]],
    u'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG int flags=0]>


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/features2d/include/opencv2/features2d.hpp =====
Namespaces: set([u'cv'])

--- Incoming ---
[u'class cv.Feature2D', ': cv::Algorithm', [], []]
ok: class CLASS cv::.Feature2D : Algorithm, name: Feature2D, base: Algorithm

--- Incoming ---
[   u'cv.Feature2D.detect',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        [u'vector_KeyPoint', u'keypoints', u'', ['/O']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv.Feature2D.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.Feature2D.detect',
    u'void',
    [],
    [   ['vector_Mat', u'images', '', []],
        [u'vector_vector_KeyPoint', u'keypoints', u'', ['/O']],
        ['vector_Mat', u'masks', u'vector_Mat()', []]],
    u'void']
ok: FUNC <void cv.Feature2D.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=vector_Mat()]>

--- Incoming ---
[   u'cv.Feature2D.compute',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        [u'vector_KeyPoint', u'keypoints', u'', ['/O', '/IO']],
        ['Mat', u'descriptors', '', ['/O']]],
    u'void']
ok: FUNC <void cv.Feature2D.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>

--- Incoming ---
[   u'cv.Feature2D.compute',
    u'void',
    [],
    [   ['vector_Mat', u'images', '', []],
        [u'vector_vector_KeyPoint', u'keypoints', u'', ['/O', '/IO']],
        ['vector_Mat', u'descriptors', '', ['/O']]],
    u'void']
ok: FUNC <void cv.Feature2D.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>

--- Incoming ---
[   u'cv.Feature2D.detectAndCompute',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'mask', '', []],
        [u'vector_KeyPoint', u'keypoints', u'', ['/O']],
        ['Mat', u'descriptors', '', ['/O']],
        [u'bool', u'useProvidedKeypoints', u'false', []]],
    u'void']
ok: FUNC <void cv.Feature2D.detectAndCompute [ARG Mat image=, ARG Mat mask=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=, ARG bool useProvidedKeypoints=false]>

--- Incoming ---
[u'cv.Feature2D.descriptorSize', u'int', [], [], u'int']
ok: FUNC <int cv.Feature2D.descriptorSize []>

--- Incoming ---
[u'cv.Feature2D.descriptorType', u'int', [], [], u'int']
ok: FUNC <int cv.Feature2D.descriptorType []>

--- Incoming ---
[u'cv.Feature2D.defaultNorm', u'int', [], [], u'int']
ok: FUNC <int cv.Feature2D.defaultNorm []>

--- Incoming ---
[   u'cv.Feature2D.write',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.Feature2D.write [ARG String fileName=]>

--- Incoming ---
[   u'cv.Feature2D.read',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.Feature2D.read [ARG String fileName=]>

--- Incoming ---
[u'cv.Feature2D.empty', u'bool', [], [], u'bool']
ok: FUNC <bool cv.Feature2D.empty []>

--- Incoming ---
[u'class cv.BRISK', u': cv::Feature2D', [], []]
ok: class CLASS cv::.BRISK : Feature2D, name: BRISK, base: Feature2D

--- Incoming ---
[   u'cv.BRISK.create',
    u'Ptr_BRISK',
    ['/S'],
    [   [u'int', u'thresh', u'30', []],
        [u'int', u'octaves', u'3', []],
        [u'float', u'patternScale', u'1.0f', []]],
    u'Ptr<BRISK>']
ok: FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=30, ARG int octaves=3, ARG float patternScale=1.0f]>

--- Incoming ---
[   u'cv.BRISK.create',
    u'Ptr_BRISK',
    ['/S'],
    [   [u'vector_float', u'radiusList', u'', []],
        [u'vector_int', u'numberList', u'', []],
        [u'float', u'dMax', u'5.85f', []],
        [u'float', u'dMin', u'8.2f', []],
        [u'vector_int', u'indexChange', u'std::vector<int>()', []]],
    u'Ptr<BRISK>']
ok: FUNC <Ptr_BRISK cv.BRISK.create [ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>

--- Incoming ---
[u'class cv.ORB', u': cv::Feature2D', [], []]
ok: class CLASS cv::.ORB : Feature2D, name: ORB, base: Feature2D

--- Incoming ---
[u'const cv.ORB.kBytes', u'32', [], []]
ok: CONST kBytes=32

--- Incoming ---
[u'const cv.ORB.HARRIS_SCORE', u'0', [], []]
ok: CONST HARRIS_SCORE=0

--- Incoming ---
[u'const cv.ORB.FAST_SCORE', u'1', [], []]
ok: CONST FAST_SCORE=1

--- Incoming ---
[   u'cv.ORB.create',
    u'Ptr_ORB',
    ['/S'],
    [   [u'int', u'nfeatures', u'500', []],
        [u'float', u'scaleFactor', u'1.2f', []],
        [u'int', u'nlevels', u'8', []],
        [u'int', u'edgeThreshold', u'31', []],
        [u'int', u'firstLevel', u'0', []],
        [u'int', u'WTA_K', u'2', []],
        [u'int', u'scoreType', u'ORB::HARRIS_SCORE', []],
        [u'int', u'patchSize', u'31', []],
        [u'int', u'fastThreshold', u'20', []]],
    u'Ptr<ORB>']
ok: FUNC <Ptr_ORB cv.ORB.create [ARG int nfeatures=500, ARG float scaleFactor=1.2f, ARG int nlevels=8, ARG int edgeThreshold=31, ARG int firstLevel=0, ARG int WTA_K=2, ARG int scoreType=ORB::HARRIS_SCORE, ARG int patchSize=31, ARG int fastThreshold=20]>

--- Incoming ---
[   u'cv.ORB.setMaxFeatures',
    u'void',
    [],
    [[u'int', u'maxFeatures', u'', []]],
    u'void']
ok: FUNC <void cv.ORB.setMaxFeatures [ARG int maxFeatures=]>

--- Incoming ---
[u'cv.ORB.getMaxFeatures', u'int', [], [], u'int']
ok: FUNC <int cv.ORB.getMaxFeatures []>

--- Incoming ---
[   u'cv.ORB.setScaleFactor',
    u'void',
    [],
    [[u'double', u'scaleFactor', u'', []]],
    u'void']
ok: FUNC <void cv.ORB.setScaleFactor [ARG double scaleFactor=]>

--- Incoming ---
[u'cv.ORB.getScaleFactor', u'double', [], [], u'double']
ok: FUNC <double cv.ORB.getScaleFactor []>

--- Incoming ---
[u'cv.ORB.setNLevels', u'void', [], [[u'int', u'nlevels', u'', []]], u'void']
ok: FUNC <void cv.ORB.setNLevels [ARG int nlevels=]>

--- Incoming ---
[u'cv.ORB.getNLevels', u'int', [], [], u'int']
ok: FUNC <int cv.ORB.getNLevels []>

--- Incoming ---
[   u'cv.ORB.setEdgeThreshold',
    u'void',
    [],
    [[u'int', u'edgeThreshold', u'', []]],
    u'void']
ok: FUNC <void cv.ORB.setEdgeThreshold [ARG int edgeThreshold=]>

--- Incoming ---
[u'cv.ORB.getEdgeThreshold', u'int', [], [], u'int']
ok: FUNC <int cv.ORB.getEdgeThreshold []>

--- Incoming ---
[   u'cv.ORB.setFirstLevel',
    u'void',
    [],
    [[u'int', u'firstLevel', u'', []]],
    u'void']
ok: FUNC <void cv.ORB.setFirstLevel [ARG int firstLevel=]>

--- Incoming ---
[u'cv.ORB.getFirstLevel', u'int', [], [], u'int']
ok: FUNC <int cv.ORB.getFirstLevel []>

--- Incoming ---
[u'cv.ORB.setWTA_K', u'void', [], [[u'int', u'wta_k', u'', []]], u'void']
ok: FUNC <void cv.ORB.setWTA_K [ARG int wta_k=]>

--- Incoming ---
[u'cv.ORB.getWTA_K', u'int', [], [], u'int']
ok: FUNC <int cv.ORB.getWTA_K []>

--- Incoming ---
[   u'cv.ORB.setScoreType',
    u'void',
    [],
    [[u'int', u'scoreType', u'', []]],
    u'void']
ok: FUNC <void cv.ORB.setScoreType [ARG int scoreType=]>

--- Incoming ---
[u'cv.ORB.getScoreType', u'int', [], [], u'int']
ok: FUNC <int cv.ORB.getScoreType []>

--- Incoming ---
[   u'cv.ORB.setPatchSize',
    u'void',
    [],
    [[u'int', u'patchSize', u'', []]],
    u'void']
ok: FUNC <void cv.ORB.setPatchSize [ARG int patchSize=]>

--- Incoming ---
[u'cv.ORB.getPatchSize', u'int', [], [], u'int']
ok: FUNC <int cv.ORB.getPatchSize []>

--- Incoming ---
[   u'cv.ORB.setFastThreshold',
    u'void',
    [],
    [[u'int', u'fastThreshold', u'', []]],
    u'void']
ok: FUNC <void cv.ORB.setFastThreshold [ARG int fastThreshold=]>

--- Incoming ---
[u'cv.ORB.getFastThreshold', u'int', [], [], u'int']
ok: FUNC <int cv.ORB.getFastThreshold []>

--- Incoming ---
[u'class cv.MSER', u': cv::Feature2D', [], []]
ok: class CLASS cv::.MSER : Feature2D, name: MSER, base: Feature2D

--- Incoming ---
[   u'cv.MSER.create',
    u'Ptr_MSER',
    ['/S'],
    [   [u'int', u'_delta', u'5', []],
        [u'int', u'_min_area', u'60', []],
        [u'int', u'_max_area', u'14400', []],
        [u'double', u'_max_variation', u'0.25', []],
        [u'double', u'_min_diversity', u'.2', []],
        [u'int', u'_max_evolution', u'200', []],
        [u'double', u'_area_threshold', u'1.01', []],
        [u'double', u'_min_margin', u'0.003', []],
        [u'int', u'_edge_blur_size', u'5', []]],
    u'Ptr<MSER>']
ok: FUNC <Ptr_MSER cv.MSER.create [ARG int _delta=5, ARG int _min_area=60, ARG int _max_area=14400, ARG double _max_variation=0.25, ARG double _min_diversity=.2, ARG int _max_evolution=200, ARG double _area_threshold=1.01, ARG double _min_margin=0.003, ARG int _edge_blur_size=5]>

--- Incoming ---
[   u'cv.MSER.detectRegions',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        [u'vector_vector_Point', u'msers', u'', ['/O']],
        [u'vector_Rect', u'bboxes', u'', ['/O']]],
    u'void']
ok: FUNC <void cv.MSER.detectRegions [ARG Mat image=, ARG vector_vector_Point msers=, ARG vector_Rect bboxes=]>

--- Incoming ---
[u'cv.MSER.setDelta', u'void', [], [[u'int', u'delta', u'', []]], u'void']
ok: FUNC <void cv.MSER.setDelta [ARG int delta=]>

--- Incoming ---
[u'cv.MSER.getDelta', u'int', [], [], u'int']
ok: FUNC <int cv.MSER.getDelta []>

--- Incoming ---
[u'cv.MSER.setMinArea', u'void', [], [[u'int', u'minArea', u'', []]], u'void']
ok: FUNC <void cv.MSER.setMinArea [ARG int minArea=]>

--- Incoming ---
[u'cv.MSER.getMinArea', u'int', [], [], u'int']
ok: FUNC <int cv.MSER.getMinArea []>

--- Incoming ---
[u'cv.MSER.setMaxArea', u'void', [], [[u'int', u'maxArea', u'', []]], u'void']
ok: FUNC <void cv.MSER.setMaxArea [ARG int maxArea=]>

--- Incoming ---
[u'cv.MSER.getMaxArea', u'int', [], [], u'int']
ok: FUNC <int cv.MSER.getMaxArea []>

--- Incoming ---
[u'cv.MSER.setPass2Only', u'void', [], [[u'bool', u'f', u'', []]], u'void']
ok: FUNC <void cv.MSER.setPass2Only [ARG bool f=]>

--- Incoming ---
[u'cv.MSER.getPass2Only', u'bool', [], [], u'bool']
ok: FUNC <bool cv.MSER.getPass2Only []>

--- Incoming ---
[u'class cv.FastFeatureDetector', u': cv::Feature2D', [], []]
ok: class CLASS cv::.FastFeatureDetector : Feature2D, name: FastFeatureDetector, base: Feature2D

--- Incoming ---
[u'const cv.FastFeatureDetector.TYPE_5_8', u'0', [], []]
ok: CONST TYPE_5_8=0

--- Incoming ---
[u'const cv.FastFeatureDetector.TYPE_7_12', u'1', [], []]
ok: CONST TYPE_7_12=1

--- Incoming ---
[u'const cv.FastFeatureDetector.TYPE_9_16', u'2', [], []]
ok: CONST TYPE_9_16=2

--- Incoming ---
[u'const cv.FastFeatureDetector.THRESHOLD', u'10000', [], []]
ok: CONST THRESHOLD=10000

--- Incoming ---
[u'const cv.FastFeatureDetector.NONMAX_SUPPRESSION', u'10001', [], []]
ok: CONST NONMAX_SUPPRESSION=10001

--- Incoming ---
[u'const cv.FastFeatureDetector.FAST_N', u'10002', [], []]
ok: CONST FAST_N=10002

--- Incoming ---
[   u'cv.FastFeatureDetector.create',
    u'Ptr_FastFeatureDetector',
    ['/S'],
    [   [u'int', u'threshold', u'10', []],
        [u'bool', u'nonmaxSuppression', u'true', []],
        [u'int', u'type', u'FastFeatureDetector::TYPE_9_16', []]],
    u'Ptr<FastFeatureDetector>']
ok: FUNC <Ptr_FastFeatureDetector cv.FastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG int type=FastFeatureDetector::TYPE_9_16]>

--- Incoming ---
[   u'cv.FastFeatureDetector.setThreshold',
    u'void',
    [],
    [[u'int', u'threshold', u'', []]],
    u'void']
ok: FUNC <void cv.FastFeatureDetector.setThreshold [ARG int threshold=]>

--- Incoming ---
[u'cv.FastFeatureDetector.getThreshold', u'int', [], [], u'int']
ok: FUNC <int cv.FastFeatureDetector.getThreshold []>

--- Incoming ---
[   u'cv.FastFeatureDetector.setNonmaxSuppression',
    u'void',
    [],
    [[u'bool', u'f', u'', []]],
    u'void']
ok: FUNC <void cv.FastFeatureDetector.setNonmaxSuppression [ARG bool f=]>

--- Incoming ---
[u'cv.FastFeatureDetector.getNonmaxSuppression', u'bool', [], [], u'bool']
ok: FUNC <bool cv.FastFeatureDetector.getNonmaxSuppression []>

--- Incoming ---
[   u'cv.FastFeatureDetector.setType',
    u'void',
    [],
    [[u'int', u'type', u'', []]],
    u'void']
ok: FUNC <void cv.FastFeatureDetector.setType [ARG int type=]>

--- Incoming ---
[u'cv.FastFeatureDetector.getType', u'int', [], [], u'int']
ok: FUNC <int cv.FastFeatureDetector.getType []>

--- Incoming ---
[u'class cv.AgastFeatureDetector', u': cv::Feature2D', [], []]
ok: class CLASS cv::.AgastFeatureDetector : Feature2D, name: AgastFeatureDetector, base: Feature2D

--- Incoming ---
[u'const cv.AgastFeatureDetector.AGAST_5_8', u'0', [], []]
ok: CONST AGAST_5_8=0

--- Incoming ---
[u'const cv.AgastFeatureDetector.AGAST_7_12d', u'1', [], []]
ok: CONST AGAST_7_12d=1

--- Incoming ---
[u'const cv.AgastFeatureDetector.AGAST_7_12s', u'2', [], []]
ok: CONST AGAST_7_12s=2

--- Incoming ---
[u'const cv.AgastFeatureDetector.OAST_9_16', u'3', [], []]
ok: CONST OAST_9_16=3

--- Incoming ---
[u'const cv.AgastFeatureDetector.THRESHOLD', u'10000', [], []]
ok: CONST THRESHOLD=10000

--- Incoming ---
[u'const cv.AgastFeatureDetector.NONMAX_SUPPRESSION', u'10001', [], []]
ok: CONST NONMAX_SUPPRESSION=10001

--- Incoming ---
[   u'cv.AgastFeatureDetector.create',
    u'Ptr_AgastFeatureDetector',
    ['/S'],
    [   [u'int', u'threshold', u'10', []],
        [u'bool', u'nonmaxSuppression', u'true', []],
        [u'int', u'type', u'AgastFeatureDetector::OAST_9_16', []]],
    u'Ptr<AgastFeatureDetector>']
ok: FUNC <Ptr_AgastFeatureDetector cv.AgastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG int type=AgastFeatureDetector::OAST_9_16]>

--- Incoming ---
[   u'cv.AgastFeatureDetector.setThreshold',
    u'void',
    [],
    [[u'int', u'threshold', u'', []]],
    u'void']
ok: FUNC <void cv.AgastFeatureDetector.setThreshold [ARG int threshold=]>

--- Incoming ---
[u'cv.AgastFeatureDetector.getThreshold', u'int', [], [], u'int']
ok: FUNC <int cv.AgastFeatureDetector.getThreshold []>

--- Incoming ---
[   u'cv.AgastFeatureDetector.setNonmaxSuppression',
    u'void',
    [],
    [[u'bool', u'f', u'', []]],
    u'void']
ok: FUNC <void cv.AgastFeatureDetector.setNonmaxSuppression [ARG bool f=]>

--- Incoming ---
[u'cv.AgastFeatureDetector.getNonmaxSuppression', u'bool', [], [], u'bool']
ok: FUNC <bool cv.AgastFeatureDetector.getNonmaxSuppression []>

--- Incoming ---
[   u'cv.AgastFeatureDetector.setType',
    u'void',
    [],
    [[u'int', u'type', u'', []]],
    u'void']
ok: FUNC <void cv.AgastFeatureDetector.setType [ARG int type=]>

--- Incoming ---
[u'cv.AgastFeatureDetector.getType', u'int', [], [], u'int']
ok: FUNC <int cv.AgastFeatureDetector.getType []>

--- Incoming ---
[u'class cv.GFTTDetector', u': cv::Feature2D', [], []]
ok: class CLASS cv::.GFTTDetector : Feature2D, name: GFTTDetector, base: Feature2D

--- Incoming ---
[   u'cv.GFTTDetector.create',
    u'Ptr_GFTTDetector',
    ['/S'],
    [   [u'int', u'maxCorners', u'1000', []],
        [u'double', u'qualityLevel', u'0.01', []],
        [u'double', u'minDistance', u'1', []],
        [u'int', u'blockSize', u'3', []],
        [u'bool', u'useHarrisDetector', u'false', []],
        [u'double', u'k', u'0.04', []]],
    u'Ptr<GFTTDetector>']
ok: FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=1000, ARG double qualityLevel=0.01, ARG double minDistance=1, ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   u'cv.GFTTDetector.setMaxFeatures',
    u'void',
    [],
    [[u'int', u'maxFeatures', u'', []]],
    u'void']
ok: FUNC <void cv.GFTTDetector.setMaxFeatures [ARG int maxFeatures=]>

--- Incoming ---
[u'cv.GFTTDetector.getMaxFeatures', u'int', [], [], u'int']
ok: FUNC <int cv.GFTTDetector.getMaxFeatures []>

--- Incoming ---
[   u'cv.GFTTDetector.setQualityLevel',
    u'void',
    [],
    [[u'double', u'qlevel', u'', []]],
    u'void']
ok: FUNC <void cv.GFTTDetector.setQualityLevel [ARG double qlevel=]>

--- Incoming ---
[u'cv.GFTTDetector.getQualityLevel', u'double', [], [], u'double']
ok: FUNC <double cv.GFTTDetector.getQualityLevel []>

--- Incoming ---
[   u'cv.GFTTDetector.setMinDistance',
    u'void',
    [],
    [[u'double', u'minDistance', u'', []]],
    u'void']
ok: FUNC <void cv.GFTTDetector.setMinDistance [ARG double minDistance=]>

--- Incoming ---
[u'cv.GFTTDetector.getMinDistance', u'double', [], [], u'double']
ok: FUNC <double cv.GFTTDetector.getMinDistance []>

--- Incoming ---
[   u'cv.GFTTDetector.setBlockSize',
    u'void',
    [],
    [[u'int', u'blockSize', u'', []]],
    u'void']
ok: FUNC <void cv.GFTTDetector.setBlockSize [ARG int blockSize=]>

--- Incoming ---
[u'cv.GFTTDetector.getBlockSize', u'int', [], [], u'int']
ok: FUNC <int cv.GFTTDetector.getBlockSize []>

--- Incoming ---
[   u'cv.GFTTDetector.setHarrisDetector',
    u'void',
    [],
    [[u'bool', u'val', u'', []]],
    u'void']
ok: FUNC <void cv.GFTTDetector.setHarrisDetector [ARG bool val=]>

--- Incoming ---
[u'cv.GFTTDetector.getHarrisDetector', u'bool', [], [], u'bool']
ok: FUNC <bool cv.GFTTDetector.getHarrisDetector []>

--- Incoming ---
[u'cv.GFTTDetector.setK', u'void', [], [[u'double', u'k', u'', []]], u'void']
ok: FUNC <void cv.GFTTDetector.setK [ARG double k=]>

--- Incoming ---
[u'cv.GFTTDetector.getK', u'double', [], [], u'double']
ok: FUNC <double cv.GFTTDetector.getK []>

--- Incoming ---
[u'class cv.SimpleBlobDetector', u': cv::Feature2D', [], []]
ignored: CLASS cv::.SimpleBlobDetector : Feature2D

--- Incoming ---
[   u'struct cv.SimpleBlobDetector.Params',
    '',
    ['/Simple'],
    [   [u'float', u'thresholdStep', '', ['/RW']],
        [u'float', u'minThreshold', '', ['/RW']],
        [u'float', u'maxThreshold', '', ['/RW']],
        [u'size_t', u'minRepeatability', '', ['/RW']],
        [u'float', u'minDistBetweenBlobs', '', ['/RW']],
        [u'bool', u'filterByColor', '', ['/RW']],
        [u'uchar', u'blobColor', '', ['/RW']],
        [u'bool', u'filterByArea', '', ['/RW']],
        [u'float', u'minArea', '', ['/RW']],
        [u'float', u'maxArea', '', ['/RW']],
        [u'bool', u'filterByCircularity', '', ['/RW']],
        [u'float', u'minCircularity', '', ['/RW']],
        [u'float', u'maxCircularity', '', ['/RW']],
        [u'bool', u'filterByInertia', '', ['/RW']],
        [u'float', u'minInertiaRatio', '', ['/RW']],
        [u'float', u'maxInertiaRatio', '', ['/RW']],
        [u'bool', u'filterByConvexity', '', ['/RW']],
        [u'float', u'minConvexity', '', ['/RW']],
        [u'float', u'maxConvexity', '', ['/RW']]]]
ok: class CLASS cv::SimpleBlobDetector.Params : , name: Params, base: 

--- Incoming ---
[u'cv.SimpleBlobDetector.Params.Params', '', [], []]
ok: FUNC < cv.SimpleBlobDetector.Params.Params []>

--- Incoming ---
[   u'cv.SimpleBlobDetector.create',
    u'Ptr_SimpleBlobDetector',
    ['/S'],
    [   [   u'SimpleBlobDetector_Params',
            u'parameters',
            u'SimpleBlobDetector::Params()',
            []]],
    u'Ptr<SimpleBlobDetector>']
ignored: FUNC <Ptr_SimpleBlobDetector cv.SimpleBlobDetector.create [ARG SimpleBlobDetector_Params parameters=SimpleBlobDetector::Params()]>

--- Incoming ---
[u'class cv.KAZE', u': cv::Feature2D', [], []]
ok: class CLASS cv::.KAZE : Feature2D, name: KAZE, base: Feature2D

--- Incoming ---
[u'const cv.KAZE.DIFF_PM_G1', u'0', [], []]
ok: CONST DIFF_PM_G1=0

--- Incoming ---
[u'const cv.KAZE.DIFF_PM_G2', u'1', [], []]
ok: CONST DIFF_PM_G2=1

--- Incoming ---
[u'const cv.KAZE.DIFF_WEICKERT', u'2', [], []]
ok: CONST DIFF_WEICKERT=2

--- Incoming ---
[u'const cv.KAZE.DIFF_CHARBONNIER', u'3', [], []]
ok: CONST DIFF_CHARBONNIER=3

--- Incoming ---
[   u'cv.KAZE.create',
    u'Ptr_KAZE',
    ['/S'],
    [   [u'bool', u'extended', u'false', []],
        [u'bool', u'upright', u'false', []],
        [u'float', u'threshold', u'0.001f', []],
        [u'int', u'nOctaves', u'4', []],
        [u'int', u'nOctaveLayers', u'4', []],
        [u'int', u'diffusivity', u'KAZE::DIFF_PM_G2', []]],
    u'Ptr<KAZE>']
ok: FUNC <Ptr_KAZE cv.KAZE.create [ARG bool extended=false, ARG bool upright=false, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG int diffusivity=KAZE::DIFF_PM_G2]>

--- Incoming ---
[   u'cv.KAZE.setExtended',
    u'void',
    [],
    [[u'bool', u'extended', u'', []]],
    u'void']
ok: FUNC <void cv.KAZE.setExtended [ARG bool extended=]>

--- Incoming ---
[u'cv.KAZE.getExtended', u'bool', [], [], u'bool']
ok: FUNC <bool cv.KAZE.getExtended []>

--- Incoming ---
[u'cv.KAZE.setUpright', u'void', [], [[u'bool', u'upright', u'', []]], u'void']
ok: FUNC <void cv.KAZE.setUpright [ARG bool upright=]>

--- Incoming ---
[u'cv.KAZE.getUpright', u'bool', [], [], u'bool']
ok: FUNC <bool cv.KAZE.getUpright []>

--- Incoming ---
[   u'cv.KAZE.setThreshold',
    u'void',
    [],
    [[u'double', u'threshold', u'', []]],
    u'void']
ok: FUNC <void cv.KAZE.setThreshold [ARG double threshold=]>

--- Incoming ---
[u'cv.KAZE.getThreshold', u'double', [], [], u'double']
ok: FUNC <double cv.KAZE.getThreshold []>

--- Incoming ---
[u'cv.KAZE.setNOctaves', u'void', [], [[u'int', u'octaves', u'', []]], u'void']
ok: FUNC <void cv.KAZE.setNOctaves [ARG int octaves=]>

--- Incoming ---
[u'cv.KAZE.getNOctaves', u'int', [], [], u'int']
ok: FUNC <int cv.KAZE.getNOctaves []>

--- Incoming ---
[   u'cv.KAZE.setNOctaveLayers',
    u'void',
    [],
    [[u'int', u'octaveLayers', u'', []]],
    u'void']
ok: FUNC <void cv.KAZE.setNOctaveLayers [ARG int octaveLayers=]>

--- Incoming ---
[u'cv.KAZE.getNOctaveLayers', u'int', [], [], u'int']
ok: FUNC <int cv.KAZE.getNOctaveLayers []>

--- Incoming ---
[u'cv.KAZE.setDiffusivity', u'void', [], [[u'int', u'diff', u'', []]], u'void']
ok: FUNC <void cv.KAZE.setDiffusivity [ARG int diff=]>

--- Incoming ---
[u'cv.KAZE.getDiffusivity', u'int', [], [], u'int']
ok: FUNC <int cv.KAZE.getDiffusivity []>

--- Incoming ---
[u'class cv.AKAZE', u': cv::Feature2D', [], []]
ok: class CLASS cv::.AKAZE : Feature2D, name: AKAZE, base: Feature2D

--- Incoming ---
[u'const cv.AKAZE.DESCRIPTOR_KAZE_UPRIGHT', u'2', [], []]
ok: CONST DESCRIPTOR_KAZE_UPRIGHT=2

--- Incoming ---
[u'const cv.AKAZE.DESCRIPTOR_KAZE', u'3', [], []]
ok: CONST DESCRIPTOR_KAZE=3

--- Incoming ---
[u'const cv.AKAZE.DESCRIPTOR_MLDB_UPRIGHT', u'4', [], []]
ok: CONST DESCRIPTOR_MLDB_UPRIGHT=4

--- Incoming ---
[u'const cv.AKAZE.DESCRIPTOR_MLDB', u'5', [], []]
ok: CONST DESCRIPTOR_MLDB=5

--- Incoming ---
[   u'cv.AKAZE.create',
    u'Ptr_AKAZE',
    ['/S'],
    [   [u'int', u'descriptor_type', u'AKAZE::DESCRIPTOR_MLDB', []],
        [u'int', u'descriptor_size', u'0', []],
        [u'int', u'descriptor_channels', u'3', []],
        [u'float', u'threshold', u'0.001f', []],
        [u'int', u'nOctaves', u'4', []],
        [u'int', u'nOctaveLayers', u'4', []],
        [u'int', u'diffusivity', u'KAZE::DIFF_PM_G2', []]],
    u'Ptr<AKAZE>']
ok: FUNC <Ptr_AKAZE cv.AKAZE.create [ARG int descriptor_type=AKAZE::DESCRIPTOR_MLDB, ARG int descriptor_size=0, ARG int descriptor_channels=3, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG int diffusivity=KAZE::DIFF_PM_G2]>

--- Incoming ---
[   u'cv.AKAZE.setDescriptorType',
    u'void',
    [],
    [[u'int', u'dtype', u'', []]],
    u'void']
ok: FUNC <void cv.AKAZE.setDescriptorType [ARG int dtype=]>

--- Incoming ---
[u'cv.AKAZE.getDescriptorType', u'int', [], [], u'int']
ok: FUNC <int cv.AKAZE.getDescriptorType []>

--- Incoming ---
[   u'cv.AKAZE.setDescriptorSize',
    u'void',
    [],
    [[u'int', u'dsize', u'', []]],
    u'void']
ok: FUNC <void cv.AKAZE.setDescriptorSize [ARG int dsize=]>

--- Incoming ---
[u'cv.AKAZE.getDescriptorSize', u'int', [], [], u'int']
ok: FUNC <int cv.AKAZE.getDescriptorSize []>

--- Incoming ---
[   u'cv.AKAZE.setDescriptorChannels',
    u'void',
    [],
    [[u'int', u'dch', u'', []]],
    u'void']
ok: FUNC <void cv.AKAZE.setDescriptorChannels [ARG int dch=]>

--- Incoming ---
[u'cv.AKAZE.getDescriptorChannels', u'int', [], [], u'int']
ok: FUNC <int cv.AKAZE.getDescriptorChannels []>

--- Incoming ---
[   u'cv.AKAZE.setThreshold',
    u'void',
    [],
    [[u'double', u'threshold', u'', []]],
    u'void']
ok: FUNC <void cv.AKAZE.setThreshold [ARG double threshold=]>

--- Incoming ---
[u'cv.AKAZE.getThreshold', u'double', [], [], u'double']
ok: FUNC <double cv.AKAZE.getThreshold []>

--- Incoming ---
[   u'cv.AKAZE.setNOctaves',
    u'void',
    [],
    [[u'int', u'octaves', u'', []]],
    u'void']
ok: FUNC <void cv.AKAZE.setNOctaves [ARG int octaves=]>

--- Incoming ---
[u'cv.AKAZE.getNOctaves', u'int', [], [], u'int']
ok: FUNC <int cv.AKAZE.getNOctaves []>

--- Incoming ---
[   u'cv.AKAZE.setNOctaveLayers',
    u'void',
    [],
    [[u'int', u'octaveLayers', u'', []]],
    u'void']
ok: FUNC <void cv.AKAZE.setNOctaveLayers [ARG int octaveLayers=]>

--- Incoming ---
[u'cv.AKAZE.getNOctaveLayers', u'int', [], [], u'int']
ok: FUNC <int cv.AKAZE.getNOctaveLayers []>

--- Incoming ---
[   u'cv.AKAZE.setDiffusivity',
    u'void',
    [],
    [[u'int', u'diff', u'', []]],
    u'void']
ok: FUNC <void cv.AKAZE.setDiffusivity [ARG int diff=]>

--- Incoming ---
[u'cv.AKAZE.getDiffusivity', u'int', [], [], u'int']
ok: FUNC <int cv.AKAZE.getDiffusivity []>

--- Incoming ---
[u'class cv.DescriptorMatcher', ': cv::Algorithm', [], []]
ok: class CLASS cv::.DescriptorMatcher : Algorithm, name: DescriptorMatcher, base: Algorithm

--- Incoming ---
[u'const cv.DescriptorMatcher.FLANNBASED', u'1', [], []]
ok: CONST FLANNBASED=1

--- Incoming ---
[u'const cv.DescriptorMatcher.BRUTEFORCE', u'2', [], []]
ok: CONST BRUTEFORCE=2

--- Incoming ---
[u'const cv.DescriptorMatcher.BRUTEFORCE_L1', u'3', [], []]
ok: CONST BRUTEFORCE_L1=3

--- Incoming ---
[u'const cv.DescriptorMatcher.BRUTEFORCE_HAMMING', u'4', [], []]
ok: CONST BRUTEFORCE_HAMMING=4

--- Incoming ---
[u'const cv.DescriptorMatcher.BRUTEFORCE_HAMMINGLUT', u'5', [], []]
ok: CONST BRUTEFORCE_HAMMINGLUT=5

--- Incoming ---
[u'const cv.DescriptorMatcher.BRUTEFORCE_SL2', u'6', [], []]
ok: CONST BRUTEFORCE_SL2=6

--- Incoming ---
[   u'cv.DescriptorMatcher.add',
    u'void',
    [],
    [['vector_Mat', u'descriptors', '', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.add [ARG vector_Mat descriptors=]>

--- Incoming ---
[   u'cv.DescriptorMatcher.getTrainDescriptors',
    u'vector_Mat',
    [],
    [],
    u'std::vector<Mat>']
ok: FUNC <vector_Mat cv.DescriptorMatcher.getTrainDescriptors []>

--- Incoming ---
[u'cv.DescriptorMatcher.clear', u'void', [], [], u'void']
ok: FUNC <void cv.DescriptorMatcher.clear []>

--- Incoming ---
[u'cv.DescriptorMatcher.empty', u'bool', [], [], u'bool']
ok: FUNC <bool cv.DescriptorMatcher.empty []>

--- Incoming ---
[u'cv.DescriptorMatcher.isMaskSupported', u'bool', [], [], u'bool']
ok: FUNC <bool cv.DescriptorMatcher.isMaskSupported []>

--- Incoming ---
[u'cv.DescriptorMatcher.train', u'void', [], [], u'void']
ok: FUNC <void cv.DescriptorMatcher.train []>

--- Incoming ---
[   u'cv.DescriptorMatcher.match',
    u'void',
    [],
    [   ['Mat', u'queryDescriptors', '', []],
        ['Mat', u'trainDescriptors', '', []],
        [u'vector_DMatch', u'matches', u'', ['/O']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_DMatch matches=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.DescriptorMatcher.knnMatch',
    u'void',
    [],
    [   ['Mat', u'queryDescriptors', '', []],
        ['Mat', u'trainDescriptors', '', []],
        [u'vector_vector_DMatch', u'matches', u'', ['/O']],
        [u'int', u'k', u'', []],
        ['Mat', u'mask', u'Mat()', []],
        [u'bool', u'compactResult', u'false', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG Mat mask=Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   u'cv.DescriptorMatcher.radiusMatch',
    u'void',
    [],
    [   ['Mat', u'queryDescriptors', '', []],
        ['Mat', u'trainDescriptors', '', []],
        [u'vector_vector_DMatch', u'matches', u'', ['/O']],
        [u'float', u'maxDistance', u'', []],
        ['Mat', u'mask', u'Mat()', []],
        [u'bool', u'compactResult', u'false', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG Mat mask=Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   u'cv.DescriptorMatcher.match',
    u'void',
    [],
    [   ['Mat', u'queryDescriptors', '', []],
        [u'vector_DMatch', u'matches', u'', ['/O']],
        ['vector_Mat', u'masks', u'vector_Mat()', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG vector_DMatch matches=, ARG vector_Mat masks=vector_Mat()]>

--- Incoming ---
[   u'cv.DescriptorMatcher.knnMatch',
    u'void',
    [],
    [   ['Mat', u'queryDescriptors', '', []],
        [u'vector_vector_DMatch', u'matches', u'', ['/O']],
        [u'int', u'k', u'', []],
        ['vector_Mat', u'masks', u'vector_Mat()', []],
        [u'bool', u'compactResult', u'false', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   u'cv.DescriptorMatcher.radiusMatch',
    u'void',
    [],
    [   ['Mat', u'queryDescriptors', '', []],
        [u'vector_vector_DMatch', u'matches', u'', ['/O']],
        [u'float', u'maxDistance', u'', []],
        ['vector_Mat', u'masks', u'vector_Mat()', []],
        [u'bool', u'compactResult', u'false', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   u'cv.DescriptorMatcher.write',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.write [ARG String fileName=]>

--- Incoming ---
[   u'cv.DescriptorMatcher.read',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.DescriptorMatcher.read [ARG String fileName=]>

--- Incoming ---
[   u'cv.DescriptorMatcher.clone',
    u'Ptr_DescriptorMatcher',
    [],
    [[u'bool', u'emptyTrainData', u'false', []]],
    u'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.clone [ARG bool emptyTrainData=false]>

--- Incoming ---
[   u'cv.DescriptorMatcher.create',
    u'Ptr_DescriptorMatcher',
    ['/S'],
    [[u'String', u'descriptorMatcherType', u'', []]],
    u'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG String descriptorMatcherType=]>

--- Incoming ---
[   u'cv.DescriptorMatcher.create',
    u'Ptr_DescriptorMatcher',
    ['/S'],
    [[u'int', u'matcherType', u'', []]],
    u'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG int matcherType=]>

--- Incoming ---
[u'class cv.BFMatcher', u': cv::DescriptorMatcher', [], []]
ok: class CLASS cv::.BFMatcher : DescriptorMatcher, name: BFMatcher, base: DescriptorMatcher

--- Incoming ---
[   u'cv.BFMatcher.BFMatcher',
    '',
    [],
    [   [u'int', u'normType', u'NORM_L2', []],
        [u'bool', u'crossCheck', u'false', []]]]
ok: FUNC < cv.BFMatcher.BFMatcher [ARG int normType=NORM_L2, ARG bool crossCheck=false]>

--- Incoming ---
[   u'cv.BFMatcher.create',
    u'Ptr_BFMatcher',
    ['/S'],
    [   [u'int', u'normType', u'NORM_L2', []],
        [u'bool', u'crossCheck', u'false', []]],
    u'Ptr<BFMatcher>']
ok: FUNC <Ptr_BFMatcher cv.BFMatcher.create [ARG int normType=NORM_L2, ARG bool crossCheck=false]>

--- Incoming ---
[u'class cv.FlannBasedMatcher', u': cv::DescriptorMatcher', [], []]
ok: class CLASS cv::.FlannBasedMatcher : DescriptorMatcher, name: FlannBasedMatcher, base: DescriptorMatcher

--- Incoming ---
[   u'cv.FlannBasedMatcher.FlannBasedMatcher',
    '',
    [],
    [   [   u'Ptr_flann_IndexParams',
            u'indexParams',
            u'makePtr<flann::KDTreeIndexParams>()',
            []],
        [   u'Ptr_flann_SearchParams',
            u'searchParams',
            u'makePtr<flann::SearchParams>()',
            []]]]
ok: FUNC < cv.FlannBasedMatcher.FlannBasedMatcher [ARG Ptr_flann_IndexParams indexParams=makePtr<flann::KDTreeIndexParams>(), ARG Ptr_flann_SearchParams searchParams=makePtr<flann::SearchParams>()]>

--- Incoming ---
[   u'cv.FlannBasedMatcher.create',
    u'Ptr_FlannBasedMatcher',
    ['/S'],
    [],
    u'Ptr<FlannBasedMatcher>']
ok: FUNC <Ptr_FlannBasedMatcher cv.FlannBasedMatcher.create []>

--- Incoming ---
[u'const cv.DrawMatchesFlags.DEFAULT', u'0', [], []]
class not found: CONST DEFAULT=0

--- Incoming ---
[u'const cv.DrawMatchesFlags.DRAW_OVER_OUTIMG', u'1', [], []]
class not found: CONST DRAW_OVER_OUTIMG=1

--- Incoming ---
[u'const cv.DrawMatchesFlags.NOT_DRAW_SINGLE_POINTS', u'2', [], []]
class not found: CONST NOT_DRAW_SINGLE_POINTS=2

--- Incoming ---
[u'const cv.DrawMatchesFlags.DRAW_RICH_KEYPOINTS', u'4', [], []]
class not found: CONST DRAW_RICH_KEYPOINTS=4

--- Incoming ---
[   u'cv.drawKeypoints',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        [u'vector_KeyPoint', u'keypoints', u'', []],
        ['Mat', u'outImage', '', ['/IO']],
        [u'Scalar', u'color', u'Scalar::all(-1)', []],
        [u'int', u'flags', u'DrawMatchesFlags::DEFAULT', []]],
    u'void']
ok: FUNC <void cv..drawKeypoints [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat outImage=, ARG Scalar color=Scalar::all(-1), ARG int flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
[   u'cv.drawMatches',
    u'void',
    [],
    [   ['Mat', u'img1', '', []],
        [u'vector_KeyPoint', u'keypoints1', u'', []],
        ['Mat', u'img2', '', []],
        [u'vector_KeyPoint', u'keypoints2', u'', []],
        [u'vector_DMatch', u'matches1to2', u'', []],
        ['Mat', u'outImg', '', ['/IO']],
        [u'Scalar', u'matchColor', u'Scalar::all(-1)', []],
        [u'Scalar', u'singlePointColor', u'Scalar::all(-1)', []],
        [u'vector_char', u'matchesMask', u'std::vector<char>()', []],
        [u'int', u'flags', u'DrawMatchesFlags::DEFAULT', []]],
    u'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG int flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
[   u'cv.drawMatches',
    u'void',
    [u'=drawMatchesKnn'],
    [   ['Mat', u'img1', '', []],
        [u'vector_KeyPoint', u'keypoints1', u'', []],
        ['Mat', u'img2', '', []],
        [u'vector_KeyPoint', u'keypoints2', u'', []],
        [u'vector_vector_DMatch', u'matches1to2', u'', []],
        ['Mat', u'outImg', '', ['/IO']],
        [u'Scalar', u'matchColor', u'Scalar::all(-1)', []],
        [u'Scalar', u'singlePointColor', u'Scalar::all(-1)', []],
        [   u'vector_vector_char',
            u'matchesMask',
            u'std::vector<std::vector<char> >()',
            []],
        [u'int', u'flags', u'DrawMatchesFlags::DEFAULT', []]],
    u'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG int flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
[u'class cv.BOWTrainer', '', [], []]
ok: class CLASS cv::.BOWTrainer : , name: BOWTrainer, base: 

--- Incoming ---
[   u'cv.BOWTrainer.add',
    u'void',
    [],
    [[u'Mat', u'descriptors', u'', []]],
    u'void']
ok: FUNC <void cv.BOWTrainer.add [ARG Mat descriptors=]>

--- Incoming ---
[u'cv.BOWTrainer.getDescriptors', u'vector_Mat', [], [], u'std::vector<Mat>']
ok: FUNC <vector_Mat cv.BOWTrainer.getDescriptors []>

--- Incoming ---
[u'cv.BOWTrainer.descriptorsCount', u'int', [], [], u'int']
ok: FUNC <int cv.BOWTrainer.descriptorsCount []>

--- Incoming ---
[u'cv.BOWTrainer.clear', u'void', [], [], u'void']
ok: FUNC <void cv.BOWTrainer.clear []>

--- Incoming ---
[u'cv.BOWTrainer.cluster', u'Mat', [], [], u'Mat']
ok: FUNC <Mat cv.BOWTrainer.cluster []>

--- Incoming ---
[   u'cv.BOWTrainer.cluster',
    u'Mat',
    [],
    [[u'Mat', u'descriptors', u'', []]],
    u'Mat']
ok: FUNC <Mat cv.BOWTrainer.cluster [ARG Mat descriptors=]>

--- Incoming ---
[u'class cv.BOWKMeansTrainer', u': cv::BOWTrainer', [], []]
ok: class CLASS cv::.BOWKMeansTrainer : BOWTrainer, name: BOWKMeansTrainer, base: BOWTrainer

--- Incoming ---
[   u'cv.BOWKMeansTrainer.BOWKMeansTrainer',
    '',
    [],
    [   [u'int', u'clusterCount', u'', []],
        [u'TermCriteria', u'termcrit', u'TermCriteria()', []],
        [u'int', u'attempts', u'3', []],
        [u'int', u'flags', u'KMEANS_PP_CENTERS', []]]]
ok: FUNC < cv.BOWKMeansTrainer.BOWKMeansTrainer [ARG int clusterCount=, ARG TermCriteria termcrit=TermCriteria(), ARG int attempts=3, ARG int flags=KMEANS_PP_CENTERS]>

--- Incoming ---
[u'cv.BOWKMeansTrainer.cluster', u'Mat', [], [], u'Mat']
ok: FUNC <Mat cv.BOWKMeansTrainer.cluster []>

--- Incoming ---
[   u'cv.BOWKMeansTrainer.cluster',
    u'Mat',
    [],
    [[u'Mat', u'descriptors', u'', []]],
    u'Mat']
ok: FUNC <Mat cv.BOWKMeansTrainer.cluster [ARG Mat descriptors=]>

--- Incoming ---
[u'class cv.BOWImgDescriptorExtractor', '', [], []]
ok: class CLASS cv::.BOWImgDescriptorExtractor : , name: BOWImgDescriptorExtractor, base: 

--- Incoming ---
[   u'cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor',
    '',
    [],
    [   [u'Ptr_DescriptorExtractor', u'dextractor', u'', []],
        [u'Ptr_DescriptorMatcher', u'dmatcher', u'', []]]]
ok: FUNC < cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor [ARG Ptr_DescriptorExtractor dextractor=, ARG Ptr_DescriptorMatcher dmatcher=]>

--- Incoming ---
[   u'cv.BOWImgDescriptorExtractor.setVocabulary',
    u'void',
    [],
    [[u'Mat', u'vocabulary', u'', []]],
    u'void']
ok: FUNC <void cv.BOWImgDescriptorExtractor.setVocabulary [ARG Mat vocabulary=]>

--- Incoming ---
[u'cv.BOWImgDescriptorExtractor.getVocabulary', u'Mat', [], [], u'Mat']
ok: FUNC <Mat cv.BOWImgDescriptorExtractor.getVocabulary []>

--- Incoming ---
[   u'cv.BOWImgDescriptorExtractor.compute2',
    u'void',
    [u'=compute'],
    [   [u'Mat', u'image', u'', []],
        [u'vector_KeyPoint', u'keypoints', u'', []],
        [u'Mat', u'imgDescriptor', u'', ['/O']]],
    u'void']
ok: FUNC <void cv.BOWImgDescriptorExtractor.compute2 [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat imgDescriptor=]>

--- Incoming ---
[u'cv.BOWImgDescriptorExtractor.descriptorSize', u'int', [], [], u'int']
ok: FUNC <int cv.BOWImgDescriptorExtractor.descriptorSize []>

--- Incoming ---
[u'cv.BOWImgDescriptorExtractor.descriptorType', u'int', [], [], u'int']
ok: FUNC <int cv.BOWImgDescriptorExtractor.descriptorType []>


===== Generating... =====
CLASS cv::.BOWImgDescriptorExtractor : 
FUNC < cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor [ARG Ptr_DescriptorExtractor dextractor=, ARG Ptr_DescriptorMatcher dmatcher=]>
SKIP:BOWImgDescriptorExtractor(Ptr_DescriptorExtractor dextractor, Ptr_DescriptorMatcher dmatcher)	 due to ARG typePtr_DescriptorExtractor/I
FUNC <Mat cv.BOWImgDescriptorExtractor.getVocabulary []>
java: Mat getVocabulary()
FUNC <int cv.BOWImgDescriptorExtractor.descriptorSize []>
java: int descriptorSize()
FUNC <int cv.BOWImgDescriptorExtractor.descriptorType []>
java: int descriptorType()
FUNC <void cv.BOWImgDescriptorExtractor.compute2 [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat imgDescriptor=]>
java: void compute(Mat image, MatOfKeyPoint keypoints, Mat imgDescriptor)
FUNC <void cv.BOWImgDescriptorExtractor.setVocabulary [ARG Mat vocabulary=]>
java: void setVocabulary(Mat vocabulary)
CLASS cv::.javaFeatureDetector : 
[CONST GRIDDETECTOR=1000, CONST PYRAMIDDETECTOR=2000, CONST DYNAMICDETECTOR=3000]
[CONST FAST=1, CONST STAR=2, CONST SIFT=3, CONST SURF=4, CONST ORB=5, CONST MSER=6, CONST GFTT=7, CONST HARRIS=8, CONST SIMPLEBLOB=9, CONST DENSE=10, CONST BRISK=11, CONST AKAZE=12, CONST GRID_FAST=GRIDDETECTOR + FAST, CONST GRID_STAR=GRIDDETECTOR + STAR, CONST GRID_SIFT=GRIDDETECTOR + SIFT, CONST GRID_SURF=GRIDDETECTOR + SURF, CONST GRID_ORB=GRIDDETECTOR + ORB, CONST GRID_MSER=GRIDDETECTOR + MSER, CONST GRID_GFTT=GRIDDETECTOR + GFTT, CONST GRID_HARRIS=GRIDDETECTOR + HARRIS, CONST GRID_SIMPLEBLOB=GRIDDETECTOR + SIMPLEBLOB, CONST GRID_DENSE=GRIDDETECTOR + DENSE, CONST GRID_BRISK=GRIDDETECTOR + BRISK, CONST GRID_AKAZE=GRIDDETECTOR + AKAZE, CONST PYRAMID_FAST=PYRAMIDDETECTOR + FAST, CONST PYRAMID_STAR=PYRAMIDDETECTOR + STAR, CONST PYRAMID_SIFT=PYRAMIDDETECTOR + SIFT, CONST PYRAMID_SURF=PYRAMIDDETECTOR + SURF, CONST PYRAMID_ORB=PYRAMIDDETECTOR + ORB, CONST PYRAMID_MSER=PYRAMIDDETECTOR + MSER, CONST PYRAMID_GFTT=PYRAMIDDETECTOR + GFTT, CONST PYRAMID_HARRIS=PYRAMIDDETECTOR + HARRIS, CONST PYRAMID_SIMPLEBLOB=PYRAMIDDETECTOR + SIMPLEBLOB, CONST PYRAMID_DENSE=PYRAMIDDETECTOR + DENSE, CONST PYRAMID_BRISK=PYRAMIDDETECTOR + BRISK, CONST PYRAMID_AKAZE=PYRAMIDDETECTOR + AKAZE, CONST DYNAMIC_FAST=DYNAMICDETECTOR + FAST, CONST DYNAMIC_STAR=DYNAMICDETECTOR + STAR, CONST DYNAMIC_SIFT=DYNAMICDETECTOR + SIFT, CONST DYNAMIC_SURF=DYNAMICDETECTOR + SURF, CONST DYNAMIC_ORB=DYNAMICDETECTOR + ORB, CONST DYNAMIC_MSER=DYNAMICDETECTOR + MSER, CONST DYNAMIC_GFTT=DYNAMICDETECTOR + GFTT, CONST DYNAMIC_HARRIS=DYNAMICDETECTOR + HARRIS, CONST DYNAMIC_SIMPLEBLOB=DYNAMICDETECTOR + SIMPLEBLOB, CONST DYNAMIC_DENSE=DYNAMICDETECTOR + DENSE, CONST DYNAMIC_BRISK=DYNAMICDETECTOR + BRISK, CONST DYNAMIC_AKAZE=DYNAMICDETECTOR + AKAZE]
FUNC <Ptr_javaFeatureDetector cv.javaFeatureDetector.create [ARG int detectorType=]>
java: FeatureDetector create(int detectorType)
FUNC <bool cv.javaFeatureDetector.empty []>
java: boolean empty()
FUNC <void cv.javaFeatureDetector.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>
java: void detect(Mat image, MatOfKeyPoint keypoints, Mat mask)
java: void detect(Mat image, MatOfKeyPoint keypoints)
FUNC <void cv.javaFeatureDetector.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=std::vector<Mat>()]>
java: void detect(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> masks)
java: void detect(List<Mat> images, List<MatOfKeyPoint> keypoints)
FUNC <void cv.javaFeatureDetector.read [ARG String fileName=]>
java: void read(String fileName)
FUNC <void cv.javaFeatureDetector.write [ARG String fileName=]>
java: void write(String fileName)
CLASS cv::.FastFeatureDetector : Feature2D
[CONST TYPE_5_8=0, CONST TYPE_7_12=1, CONST TYPE_9_16=2, CONST THRESHOLD=10000, CONST NONMAX_SUPPRESSION=10001, CONST FAST_N=10002]
FUNC <Ptr_FastFeatureDetector cv.FastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG int type=FastFeatureDetector::TYPE_9_16]>
java: FastFeatureDetector create(int threshold, boolean nonmaxSuppression, int type)
java: FastFeatureDetector create()
FUNC <bool cv.FastFeatureDetector.getNonmaxSuppression []>
java: boolean getNonmaxSuppression()
FUNC <int cv.FastFeatureDetector.getThreshold []>
java: int getThreshold()
FUNC <int cv.FastFeatureDetector.getType []>
java: int getType()
FUNC <void cv.FastFeatureDetector.setNonmaxSuppression [ARG bool f=]>
java: void setNonmaxSuppression(boolean f)
FUNC <void cv.FastFeatureDetector.setThreshold [ARG int threshold=]>
java: void setThreshold(int threshold)
FUNC <void cv.FastFeatureDetector.setType [ARG int type=]>
java: void setType(int type)
CLASS cv::.Feature2D : Algorithm
FUNC <bool cv.Feature2D.empty []>
java: boolean empty()
FUNC <int cv.Feature2D.defaultNorm []>
java: int defaultNorm()
FUNC <int cv.Feature2D.descriptorSize []>
java: int descriptorSize()
FUNC <int cv.Feature2D.descriptorType []>
java: int descriptorType()
FUNC <void cv.Feature2D.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>
java: void compute(Mat image, MatOfKeyPoint keypoints, Mat descriptors)
FUNC <void cv.Feature2D.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>
java: void compute(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> descriptors)
FUNC <void cv.Feature2D.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>
java: void detect(Mat image, MatOfKeyPoint keypoints, Mat mask)
java: void detect(Mat image, MatOfKeyPoint keypoints)
FUNC <void cv.Feature2D.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=vector_Mat()]>
java: void detect(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> masks)
java: void detect(List<Mat> images, List<MatOfKeyPoint> keypoints)
FUNC <void cv.Feature2D.detectAndCompute [ARG Mat image=, ARG Mat mask=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=, ARG bool useProvidedKeypoints=false]>
java: void detectAndCompute(Mat image, Mat mask, MatOfKeyPoint keypoints, Mat descriptors, boolean useProvidedKeypoints)
java: void detectAndCompute(Mat image, Mat mask, MatOfKeyPoint keypoints, Mat descriptors)
FUNC <void cv.Feature2D.read [ARG String fileName=]>
java: void read(String fileName)
FUNC <void cv.Feature2D.write [ARG String fileName=]>
java: void write(String fileName)
CLASS cv::.BRISK : Feature2D
FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=30, ARG int octaves=3, ARG float patternScale=1.0f]>
java: BRISK create(int thresh, int octaves, float patternScale)
java: BRISK create()
FUNC <Ptr_BRISK cv.BRISK.create [ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin, MatOfInt indexChange)
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList)
CLASS cv::.BFMatcher : DescriptorMatcher
FUNC < cv.BFMatcher.BFMatcher [ARG int normType=NORM_L2, ARG bool crossCheck=false]>
java:  BFMatcher(int normType, boolean crossCheck)
java:  BFMatcher()
FUNC <Ptr_BFMatcher cv.BFMatcher.create [ARG int normType=NORM_L2, ARG bool crossCheck=false]>
java: BFMatcher create(int normType, boolean crossCheck)
java: BFMatcher create()
CLASS cv::.AgastFeatureDetector : Feature2D
[CONST AGAST_5_8=0, CONST AGAST_7_12d=1, CONST AGAST_7_12s=2, CONST OAST_9_16=3, CONST THRESHOLD=10000, CONST NONMAX_SUPPRESSION=10001]
FUNC <Ptr_AgastFeatureDetector cv.AgastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG int type=AgastFeatureDetector::OAST_9_16]>
java: AgastFeatureDetector create(int threshold, boolean nonmaxSuppression, int type)
java: AgastFeatureDetector create()
FUNC <bool cv.AgastFeatureDetector.getNonmaxSuppression []>
java: boolean getNonmaxSuppression()
FUNC <int cv.AgastFeatureDetector.getThreshold []>
java: int getThreshold()
FUNC <int cv.AgastFeatureDetector.getType []>
java: int getType()
FUNC <void cv.AgastFeatureDetector.setNonmaxSuppression [ARG bool f=]>
java: void setNonmaxSuppression(boolean f)
FUNC <void cv.AgastFeatureDetector.setThreshold [ARG int threshold=]>
java: void setThreshold(int threshold)
FUNC <void cv.AgastFeatureDetector.setType [ARG int type=]>
java: void setType(int type)
CLASS cv::.GFTTDetector : Feature2D
FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=1000, ARG double qualityLevel=0.01, ARG double minDistance=1, ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, boolean useHarrisDetector, double k)
java: GFTTDetector create()
FUNC <bool cv.GFTTDetector.getHarrisDetector []>
java: boolean getHarrisDetector()
FUNC <double cv.GFTTDetector.getK []>
java: double getK()
FUNC <double cv.GFTTDetector.getMinDistance []>
java: double getMinDistance()
FUNC <double cv.GFTTDetector.getQualityLevel []>
java: double getQualityLevel()
FUNC <int cv.GFTTDetector.getBlockSize []>
java: int getBlockSize()
FUNC <int cv.GFTTDetector.getMaxFeatures []>
java: int getMaxFeatures()
FUNC <void cv.GFTTDetector.setBlockSize [ARG int blockSize=]>
java: void setBlockSize(int blockSize)
FUNC <void cv.GFTTDetector.setHarrisDetector [ARG bool val=]>
java: void setHarrisDetector(boolean val)
FUNC <void cv.GFTTDetector.setK [ARG double k=]>
java: void setK(double k)
FUNC <void cv.GFTTDetector.setMaxFeatures [ARG int maxFeatures=]>
java: void setMaxFeatures(int maxFeatures)
FUNC <void cv.GFTTDetector.setMinDistance [ARG double minDistance=]>
java: void setMinDistance(double minDistance)
FUNC <void cv.GFTTDetector.setQualityLevel [ARG double qlevel=]>
java: void setQualityLevel(double qlevel)
CLASS cv::.DescriptorMatcher : Algorithm
[CONST FLANNBASED=1, CONST BRUTEFORCE=2, CONST BRUTEFORCE_L1=3, CONST BRUTEFORCE_HAMMING=4, CONST BRUTEFORCE_HAMMINGLUT=5, CONST BRUTEFORCE_SL2=6]
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.clone [ARG bool emptyTrainData=false]>
java: DescriptorMatcher clone(boolean emptyTrainData)
java: DescriptorMatcher clone()
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG String descriptorMatcherType=]>
java: DescriptorMatcher create(String descriptorMatcherType)
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG int matcherType=]>
java: DescriptorMatcher create(int matcherType)
FUNC <bool cv.DescriptorMatcher.empty []>
java: boolean empty()
FUNC <bool cv.DescriptorMatcher.isMaskSupported []>
java: boolean isMaskSupported()
FUNC <vector_Mat cv.DescriptorMatcher.getTrainDescriptors []>
java: List<Mat> getTrainDescriptors()
FUNC <void cv.DescriptorMatcher.add [ARG vector_Mat descriptors=]>
java: void add(List<Mat> descriptors)
FUNC <void cv.DescriptorMatcher.clear []>
java: void clear()
FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG Mat mask=Mat(), ARG bool compactResult=false]>
java: void knnMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, int k, Mat mask, boolean compactResult)
java: void knnMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, int k)
FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>
java: void knnMatch(Mat queryDescriptors, List<MatOfDMatch> matches, int k, List<Mat> masks, boolean compactResult)
java: void knnMatch(Mat queryDescriptors, List<MatOfDMatch> matches, int k)
FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_DMatch matches=, ARG Mat mask=Mat()]>
java: void match(Mat queryDescriptors, Mat trainDescriptors, MatOfDMatch matches, Mat mask)
java: void match(Mat queryDescriptors, Mat trainDescriptors, MatOfDMatch matches)
FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG vector_DMatch matches=, ARG vector_Mat masks=vector_Mat()]>
java: void match(Mat queryDescriptors, MatOfDMatch matches, List<Mat> masks)
java: void match(Mat queryDescriptors, MatOfDMatch matches)
FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG Mat mask=Mat(), ARG bool compactResult=false]>
java: void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, float maxDistance, Mat mask, boolean compactResult)
java: void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, float maxDistance)
FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>
java: void radiusMatch(Mat queryDescriptors, List<MatOfDMatch> matches, float maxDistance, List<Mat> masks, boolean compactResult)
java: void radiusMatch(Mat queryDescriptors, List<MatOfDMatch> matches, float maxDistance)
FUNC <void cv.DescriptorMatcher.read [ARG String fileName=]>
java: void read(String fileName)
FUNC <void cv.DescriptorMatcher.train []>
java: void train()
FUNC <void cv.DescriptorMatcher.write [ARG String fileName=]>
java: void write(String fileName)
CLASS cv::.KAZE : Feature2D
[CONST DIFF_PM_G1=0, CONST DIFF_PM_G2=1, CONST DIFF_WEICKERT=2, CONST DIFF_CHARBONNIER=3]
FUNC <Ptr_KAZE cv.KAZE.create [ARG bool extended=false, ARG bool upright=false, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG int diffusivity=KAZE::DIFF_PM_G2]>
java: KAZE create(boolean extended, boolean upright, float threshold, int nOctaves, int nOctaveLayers, int diffusivity)
java: KAZE create()
FUNC <bool cv.KAZE.getExtended []>
java: boolean getExtended()
FUNC <bool cv.KAZE.getUpright []>
java: boolean getUpright()
FUNC <double cv.KAZE.getThreshold []>
java: double getThreshold()
FUNC <int cv.KAZE.getDiffusivity []>
java: int getDiffusivity()
FUNC <int cv.KAZE.getNOctaveLayers []>
java: int getNOctaveLayers()
FUNC <int cv.KAZE.getNOctaves []>
java: int getNOctaves()
FUNC <void cv.KAZE.setDiffusivity [ARG int diff=]>
java: void setDiffusivity(int diff)
FUNC <void cv.KAZE.setExtended [ARG bool extended=]>
java: void setExtended(boolean extended)
FUNC <void cv.KAZE.setNOctaveLayers [ARG int octaveLayers=]>
java: void setNOctaveLayers(int octaveLayers)
FUNC <void cv.KAZE.setNOctaves [ARG int octaves=]>
java: void setNOctaves(int octaves)
FUNC <void cv.KAZE.setThreshold [ARG double threshold=]>
java: void setThreshold(double threshold)
FUNC <void cv.KAZE.setUpright [ARG bool upright=]>
java: void setUpright(boolean upright)
CLASS ::.Features2d : 
[CONST DRAW_OVER_OUTIMG=1, CONST NOT_DRAW_SINGLE_POINTS=2, CONST DRAW_RICH_KEYPOINTS=4]
FUNC <void cv..drawKeypoints [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat outImage=, ARG Scalar color=Scalar::all(-1), ARG int flags=DrawMatchesFlags::DEFAULT]>
java: void drawKeypoints(Mat image, MatOfKeyPoint keypoints, Mat outImage, Scalar color, int flags)
java: void drawKeypoints(Mat image, MatOfKeyPoint keypoints, Mat outImage)
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG int flags=DrawMatchesFlags::DEFAULT]>
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, MatOfByte matchesMask, int flags)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg)
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG int flags=0]>
java: void drawMatches2(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, List<MatOfByte> matchesMask, int flags)
java: void drawMatches2(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg)
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG int flags=DrawMatchesFlags::DEFAULT]>
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, List<MatOfByte> matchesMask, int flags)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg)
CLASS cv::.AKAZE : Feature2D
[CONST DESCRIPTOR_KAZE_UPRIGHT=2, CONST DESCRIPTOR_KAZE=3, CONST DESCRIPTOR_MLDB_UPRIGHT=4, CONST DESCRIPTOR_MLDB=5]
FUNC <Ptr_AKAZE cv.AKAZE.create [ARG int descriptor_type=AKAZE::DESCRIPTOR_MLDB, ARG int descriptor_size=0, ARG int descriptor_channels=3, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG int diffusivity=KAZE::DIFF_PM_G2]>
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves, int nOctaveLayers, int diffusivity)
java: AKAZE create()
FUNC <double cv.AKAZE.getThreshold []>
java: double getThreshold()
FUNC <int cv.AKAZE.getDescriptorChannels []>
java: int getDescriptorChannels()
FUNC <int cv.AKAZE.getDescriptorSize []>
java: int getDescriptorSize()
FUNC <int cv.AKAZE.getDescriptorType []>
java: int getDescriptorType()
FUNC <int cv.AKAZE.getDiffusivity []>
java: int getDiffusivity()
FUNC <int cv.AKAZE.getNOctaveLayers []>
java: int getNOctaveLayers()
FUNC <int cv.AKAZE.getNOctaves []>
java: int getNOctaves()
FUNC <void cv.AKAZE.setDescriptorChannels [ARG int dch=]>
java: void setDescriptorChannels(int dch)
FUNC <void cv.AKAZE.setDescriptorSize [ARG int dsize=]>
java: void setDescriptorSize(int dsize)
FUNC <void cv.AKAZE.setDescriptorType [ARG int dtype=]>
java: void setDescriptorType(int dtype)
FUNC <void cv.AKAZE.setDiffusivity [ARG int diff=]>
java: void setDiffusivity(int diff)
FUNC <void cv.AKAZE.setNOctaveLayers [ARG int octaveLayers=]>
java: void setNOctaveLayers(int octaveLayers)
FUNC <void cv.AKAZE.setNOctaves [ARG int octaves=]>
java: void setNOctaves(int octaves)
FUNC <void cv.AKAZE.setThreshold [ARG double threshold=]>
java: void setThreshold(double threshold)
CLASS cv::SimpleBlobDetector.Params : 
FUNC < cv.SimpleBlobDetector.Params.Params []>
java:  Params()
FUNC <float cv.SimpleBlobDetector.Params.get_thresholdStep []>
java: float get_thresholdStep()
FUNC <void cv.SimpleBlobDetector.Params.set_thresholdStep [ARG float thresholdStep=]>
java: void set_thresholdStep(float thresholdStep)
FUNC <float cv.SimpleBlobDetector.Params.get_minThreshold []>
java: float get_minThreshold()
FUNC <void cv.SimpleBlobDetector.Params.set_minThreshold [ARG float minThreshold=]>
java: void set_minThreshold(float minThreshold)
FUNC <float cv.SimpleBlobDetector.Params.get_maxThreshold []>
java: float get_maxThreshold()
FUNC <void cv.SimpleBlobDetector.Params.set_maxThreshold [ARG float maxThreshold=]>
java: void set_maxThreshold(float maxThreshold)
FUNC <size_t cv.SimpleBlobDetector.Params.get_minRepeatability []>
java: long get_minRepeatability()
FUNC <void cv.SimpleBlobDetector.Params.set_minRepeatability [ARG size_t minRepeatability=]>
java: void set_minRepeatability(long minRepeatability)
FUNC <float cv.SimpleBlobDetector.Params.get_minDistBetweenBlobs []>
java: float get_minDistBetweenBlobs()
FUNC <void cv.SimpleBlobDetector.Params.set_minDistBetweenBlobs [ARG float minDistBetweenBlobs=]>
java: void set_minDistBetweenBlobs(float minDistBetweenBlobs)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByColor []>
java: boolean get_filterByColor()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByColor [ARG bool filterByColor=]>
java: void set_filterByColor(boolean filterByColor)
FUNC <uchar cv.SimpleBlobDetector.Params.get_blobColor []>
SKIP:uchar Params::blobColor	 due to RET typeuchar
FUNC <void cv.SimpleBlobDetector.Params.set_blobColor [ARG uchar blobColor=]>
SKIP:void Params::blobColor	 due to ARG typeuchar/I
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByArea []>
java: boolean get_filterByArea()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByArea [ARG bool filterByArea=]>
java: void set_filterByArea(boolean filterByArea)
FUNC <float cv.SimpleBlobDetector.Params.get_minArea []>
java: float get_minArea()
FUNC <void cv.SimpleBlobDetector.Params.set_minArea [ARG float minArea=]>
java: void set_minArea(float minArea)
FUNC <float cv.SimpleBlobDetector.Params.get_maxArea []>
java: float get_maxArea()
FUNC <void cv.SimpleBlobDetector.Params.set_maxArea [ARG float maxArea=]>
java: void set_maxArea(float maxArea)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByCircularity []>
java: boolean get_filterByCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByCircularity [ARG bool filterByCircularity=]>
java: void set_filterByCircularity(boolean filterByCircularity)
FUNC <float cv.SimpleBlobDetector.Params.get_minCircularity []>
java: float get_minCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_minCircularity [ARG float minCircularity=]>
java: void set_minCircularity(float minCircularity)
FUNC <float cv.SimpleBlobDetector.Params.get_maxCircularity []>
java: float get_maxCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_maxCircularity [ARG float maxCircularity=]>
java: void set_maxCircularity(float maxCircularity)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByInertia []>
java: boolean get_filterByInertia()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByInertia [ARG bool filterByInertia=]>
java: void set_filterByInertia(boolean filterByInertia)
FUNC <float cv.SimpleBlobDetector.Params.get_minInertiaRatio []>
java: float get_minInertiaRatio()
FUNC <void cv.SimpleBlobDetector.Params.set_minInertiaRatio [ARG float minInertiaRatio=]>
java: void set_minInertiaRatio(float minInertiaRatio)
FUNC <float cv.SimpleBlobDetector.Params.get_maxInertiaRatio []>
java: float get_maxInertiaRatio()
FUNC <void cv.SimpleBlobDetector.Params.set_maxInertiaRatio [ARG float maxInertiaRatio=]>
java: void set_maxInertiaRatio(float maxInertiaRatio)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByConvexity []>
java: boolean get_filterByConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByConvexity [ARG bool filterByConvexity=]>
java: void set_filterByConvexity(boolean filterByConvexity)
FUNC <float cv.SimpleBlobDetector.Params.get_minConvexity []>
java: float get_minConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_minConvexity [ARG float minConvexity=]>
java: void set_minConvexity(float minConvexity)
FUNC <float cv.SimpleBlobDetector.Params.get_maxConvexity []>
java: float get_maxConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_maxConvexity [ARG float maxConvexity=]>
java: void set_maxConvexity(float maxConvexity)
CLASS cv::.BOWTrainer : 
FUNC <Mat cv.BOWTrainer.cluster [ARG Mat descriptors=]>
java: Mat cluster(Mat descriptors)
FUNC <Mat cv.BOWTrainer.cluster []>
java: Mat cluster()
FUNC <int cv.BOWTrainer.descriptorsCount []>
java: int descriptorsCount()
FUNC <vector_Mat cv.BOWTrainer.getDescriptors []>
java: List<Mat> getDescriptors()
FUNC <void cv.BOWTrainer.add [ARG Mat descriptors=]>
java: void add(Mat descriptors)
FUNC <void cv.BOWTrainer.clear []>
java: void clear()
CLASS cv::.javaDescriptorExtractor : 
[CONST OPPONENTEXTRACTOR=1000]
[CONST SIFT=1, CONST SURF=2, CONST ORB=3, CONST BRIEF=4, CONST BRISK=5, CONST FREAK=6, CONST AKAZE=7, CONST OPPONENT_SIFT=OPPONENTEXTRACTOR + SIFT, CONST OPPONENT_SURF=OPPONENTEXTRACTOR + SURF, CONST OPPONENT_ORB=OPPONENTEXTRACTOR + ORB, CONST OPPONENT_BRIEF=OPPONENTEXTRACTOR + BRIEF, CONST OPPONENT_BRISK=OPPONENTEXTRACTOR + BRISK, CONST OPPONENT_FREAK=OPPONENTEXTRACTOR + FREAK, CONST OPPONENT_AKAZE=OPPONENTEXTRACTOR + AKAZE]
FUNC <Ptr_javaDescriptorExtractor cv.javaDescriptorExtractor.create [ARG int extractorType=]>
java: DescriptorExtractor create(int extractorType)
FUNC <bool cv.javaDescriptorExtractor.empty []>
java: boolean empty()
FUNC <int cv.javaDescriptorExtractor.descriptorSize []>
java: int descriptorSize()
FUNC <int cv.javaDescriptorExtractor.descriptorType []>
java: int descriptorType()
FUNC <void cv.javaDescriptorExtractor.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>
java: void compute(Mat image, MatOfKeyPoint keypoints, Mat descriptors)
FUNC <void cv.javaDescriptorExtractor.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>
java: void compute(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> descriptors)
FUNC <void cv.javaDescriptorExtractor.read [ARG String fileName=]>
java: void read(String fileName)
FUNC <void cv.javaDescriptorExtractor.write [ARG String fileName=]>
java: void write(String fileName)
CLASS cv::.ORB : Feature2D
[CONST kBytes=32, CONST HARRIS_SCORE=0, CONST FAST_SCORE=1]
FUNC <Ptr_ORB cv.ORB.create [ARG int nfeatures=500, ARG float scaleFactor=1.2f, ARG int nlevels=8, ARG int edgeThreshold=31, ARG int firstLevel=0, ARG int WTA_K=2, ARG int scoreType=ORB::HARRIS_SCORE, ARG int patchSize=31, ARG int fastThreshold=20]>
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K, int scoreType, int patchSize, int fastThreshold)
java: ORB create()
FUNC <double cv.ORB.getScaleFactor []>
java: double getScaleFactor()
FUNC <int cv.ORB.getEdgeThreshold []>
java: int getEdgeThreshold()
FUNC <int cv.ORB.getFastThreshold []>
java: int getFastThreshold()
FUNC <int cv.ORB.getFirstLevel []>
java: int getFirstLevel()
FUNC <int cv.ORB.getMaxFeatures []>
java: int getMaxFeatures()
FUNC <int cv.ORB.getNLevels []>
java: int getNLevels()
FUNC <int cv.ORB.getPatchSize []>
java: int getPatchSize()
FUNC <int cv.ORB.getScoreType []>
java: int getScoreType()
FUNC <int cv.ORB.getWTA_K []>
java: int getWTA_K()
FUNC <void cv.ORB.setEdgeThreshold [ARG int edgeThreshold=]>
java: void setEdgeThreshold(int edgeThreshold)
FUNC <void cv.ORB.setFastThreshold [ARG int fastThreshold=]>
java: void setFastThreshold(int fastThreshold)
FUNC <void cv.ORB.setFirstLevel [ARG int firstLevel=]>
java: void setFirstLevel(int firstLevel)
FUNC <void cv.ORB.setMaxFeatures [ARG int maxFeatures=]>
java: void setMaxFeatures(int maxFeatures)
FUNC <void cv.ORB.setNLevels [ARG int nlevels=]>
java: void setNLevels(int nlevels)
FUNC <void cv.ORB.setPatchSize [ARG int patchSize=]>
java: void setPatchSize(int patchSize)
FUNC <void cv.ORB.setScaleFactor [ARG double scaleFactor=]>
java: void setScaleFactor(double scaleFactor)
FUNC <void cv.ORB.setScoreType [ARG int scoreType=]>
java: void setScoreType(int scoreType)
FUNC <void cv.ORB.setWTA_K [ARG int wta_k=]>
java: void setWTA_K(int wta_k)
CLASS cv::.MSER : Feature2D
FUNC <Ptr_MSER cv.MSER.create [ARG int _delta=5, ARG int _min_area=60, ARG int _max_area=14400, ARG double _max_variation=0.25, ARG double _min_diversity=.2, ARG int _max_evolution=200, ARG double _area_threshold=1.01, ARG double _min_margin=0.003, ARG int _edge_blur_size=5]>
java: MSER create(int _delta, int _min_area, int _max_area, double _max_variation, double _min_diversity, int _max_evolution, double _area_threshold, double _min_margin, int _edge_blur_size)
java: MSER create()
FUNC <bool cv.MSER.getPass2Only []>
java: boolean getPass2Only()
FUNC <int cv.MSER.getDelta []>
java: int getDelta()
FUNC <int cv.MSER.getMaxArea []>
java: int getMaxArea()
FUNC <int cv.MSER.getMinArea []>
java: int getMinArea()
FUNC <void cv.MSER.detectRegions [ARG Mat image=, ARG vector_vector_Point msers=, ARG vector_Rect bboxes=]>
java: void detectRegions(Mat image, List<MatOfPoint> msers, MatOfRect bboxes)
FUNC <void cv.MSER.setDelta [ARG int delta=]>
java: void setDelta(int delta)
FUNC <void cv.MSER.setMaxArea [ARG int maxArea=]>
java: void setMaxArea(int maxArea)
FUNC <void cv.MSER.setMinArea [ARG int minArea=]>
java: void setMinArea(int minArea)
FUNC <void cv.MSER.setPass2Only [ARG bool f=]>
java: void setPass2Only(boolean f)
CLASS cv::.BOWKMeansTrainer : BOWTrainer
FUNC < cv.BOWKMeansTrainer.BOWKMeansTrainer [ARG int clusterCount=, ARG TermCriteria termcrit=TermCriteria(), ARG int attempts=3, ARG int flags=KMEANS_PP_CENTERS]>
java:  BOWKMeansTrainer(int clusterCount, TermCriteria termcrit, int attempts, int flags)
java:  BOWKMeansTrainer(int clusterCount)
FUNC <Mat cv.BOWKMeansTrainer.cluster [ARG Mat descriptors=]>
java: Mat cluster(Mat descriptors)
FUNC <Mat cv.BOWKMeansTrainer.cluster []>
java: Mat cluster()
CLASS cv::.FlannBasedMatcher : DescriptorMatcher
FUNC < cv.FlannBasedMatcher.FlannBasedMatcher [ARG Ptr_flann_IndexParams indexParams=makePtr<flann::KDTreeIndexParams>(), ARG Ptr_flann_SearchParams searchParams=makePtr<flann::SearchParams>()]>
java:  FlannBasedMatcher()
java:  FlannBasedMatcher()
FUNC <Ptr_FlannBasedMatcher cv.FlannBasedMatcher.create []>
java: FlannBasedMatcher create()
