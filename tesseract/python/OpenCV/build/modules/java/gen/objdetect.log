ok: class CLASS ::.Objdetect : , name: Objdetect, base: 


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/objdetect/include/opencv2/objdetect/objdetect_c.h =====
Namespaces: set([''])
Ignore header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/objdetect/include/opencv2/objdetect/objdetect_c.h


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/objdetect/include/opencv2/objdetect.hpp =====
Namespaces: set(['', u'cv'])

--- Incoming ---
[   u'cv.groupRectangles',
    u'void',
    [],
    [   [u'vector_Rect', u'rectList', u'', ['/IO']],
        [u'vector_int', u'weights', u'', ['/O']],
        [u'int', u'groupThreshold', u'', []],
        [u'double', u'eps', u'0.2', []]],
    u'void']
ok: FUNC <void cv..groupRectangles [ARG vector_Rect rectList=, ARG vector_int weights=, ARG int groupThreshold=, ARG double eps=0.2]>

--- Incoming ---
[u'const cv.CASCADE_DO_CANNY_PRUNING', u'1', [], []]
ok: CONST CASCADE_DO_CANNY_PRUNING=1

--- Incoming ---
[u'const cv.CASCADE_SCALE_IMAGE', u'2', [], []]
ok: CONST CASCADE_SCALE_IMAGE=2

--- Incoming ---
[u'const cv.CASCADE_FIND_BIGGEST_OBJECT', u'4', [], []]
ok: CONST CASCADE_FIND_BIGGEST_OBJECT=4

--- Incoming ---
[u'const cv.CASCADE_DO_ROUGH_SEARCH', u'8', [], []]
ok: CONST CASCADE_DO_ROUGH_SEARCH=8

--- Incoming ---
[u'class cv.BaseCascadeClassifier', ': cv::Algorithm', [], []]
ok: class CLASS cv::.BaseCascadeClassifier : Algorithm, name: BaseCascadeClassifier, base: Algorithm

--- Incoming ---
[u'class cv.CascadeClassifier', '', [], []]
ok: class CLASS cv::.CascadeClassifier : , name: CascadeClassifier, base: 

--- Incoming ---
[u'cv.CascadeClassifier.CascadeClassifier', '', [], []]
ok: FUNC < cv.CascadeClassifier.CascadeClassifier []>

--- Incoming ---
[   u'cv.CascadeClassifier.CascadeClassifier',
    '',
    [],
    [[u'String', u'filename', u'', []]]]
ok: FUNC < cv.CascadeClassifier.CascadeClassifier [ARG String filename=]>

--- Incoming ---
[u'cv.CascadeClassifier.empty', u'bool', [], [], u'bool']
ok: FUNC <bool cv.CascadeClassifier.empty []>

--- Incoming ---
[   u'cv.CascadeClassifier.load',
    u'bool',
    [],
    [[u'String', u'filename', u'', []]],
    u'bool']
ok: FUNC <bool cv.CascadeClassifier.load [ARG String filename=]>

--- Incoming ---
[   u'cv.CascadeClassifier.read',
    u'bool',
    [],
    [[u'FileNode', u'node', u'', []]],
    u'bool']
ok: FUNC <bool cv.CascadeClassifier.read [ARG FileNode node=]>

--- Incoming ---
[   u'cv.CascadeClassifier.detectMultiScale',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        [u'vector_Rect', u'objects', u'', ['/O']],
        [u'double', u'scaleFactor', u'1.1', []],
        [u'int', u'minNeighbors', u'3', []],
        [u'int', u'flags', u'0', []],
        [u'Size', u'minSize', u'Size()', []],
        [u'Size', u'maxSize', u'Size()', []]],
    u'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>

--- Incoming ---
[   u'cv.CascadeClassifier.detectMultiScale',
    u'void',
    [u'=detectMultiScale2'],
    [   ['Mat', u'image', '', []],
        [u'vector_Rect', u'objects', u'', ['/O']],
        [u'vector_int', u'numDetections', u'', ['/O']],
        [u'double', u'scaleFactor', u'1.1', []],
        [u'int', u'minNeighbors', u'3', []],
        [u'int', u'flags', u'0', []],
        [u'Size', u'minSize', u'Size()', []],
        [u'Size', u'maxSize', u'Size()', []]],
    u'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int numDetections=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>

--- Incoming ---
[   u'cv.CascadeClassifier.detectMultiScale',
    u'void',
    [u'=detectMultiScale3'],
    [   ['Mat', u'image', '', []],
        [u'vector_Rect', u'objects', u'', ['/O']],
        [u'vector_int', u'rejectLevels', u'', ['/O']],
        [u'vector_double', u'levelWeights', u'', ['/O']],
        [u'double', u'scaleFactor', u'1.1', []],
        [u'int', u'minNeighbors', u'3', []],
        [u'int', u'flags', u'0', []],
        [u'Size', u'minSize', u'Size()', []],
        [u'Size', u'maxSize', u'Size()', []],
        [u'bool', u'outputRejectLevels', u'false', []]],
    u'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int rejectLevels=, ARG vector_double levelWeights=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size(), ARG bool outputRejectLevels=false]>

--- Incoming ---
[u'cv.CascadeClassifier.isOldFormatCascade', u'bool', [], [], u'bool']
ok: FUNC <bool cv.CascadeClassifier.isOldFormatCascade []>

--- Incoming ---
[u'cv.CascadeClassifier.getOriginalWindowSize', u'Size', [], [], u'Size']
ok: FUNC <Size cv.CascadeClassifier.getOriginalWindowSize []>

--- Incoming ---
[u'cv.CascadeClassifier.getFeatureType', u'int', [], [], u'int']
ok: FUNC <int cv.CascadeClassifier.getFeatureType []>

--- Incoming ---
[   u'cv.CascadeClassifier.convert',
    u'bool',
    ['/S'],
    [[u'String', u'oldcascade', u'', []], [u'String', u'newcascade', u'', []]],
    u'bool']
ok: FUNC <bool cv.CascadeClassifier.convert [ARG String oldcascade=, ARG String newcascade=]>

--- Incoming ---
[   u'struct cv.HOGDescriptor',
    '',
    [],
    [   [u'Size', u'winSize', '', []],
        [u'Size', u'blockSize', '', []],
        [u'Size', u'blockStride', '', []],
        [u'Size', u'cellSize', '', []],
        [u'int', u'nbins', '', []],
        [u'int', u'derivAperture', '', []],
        [u'double', u'winSigma', '', []],
        [u'int', u'histogramNormType', '', []],
        [u'double', u'L2HysThreshold', '', []],
        [u'bool', u'gammaCorrection', '', []],
        [u'vector_float', u'svmDetector', '', []],
        [u'int', u'nlevels', '', []],
        [u'bool', u'signedGradient', '', []]]]
ok: class CLASS cv::.HOGDescriptor : , name: HOGDescriptor, base: 

--- Incoming ---
[u'const cv.HOGDescriptor.L2Hys', u'0', [], []]
ok: CONST L2Hys=0

--- Incoming ---
[u'const cv.HOGDescriptor.DEFAULT_NLEVELS', u'64', [], []]
ok: CONST DEFAULT_NLEVELS=64

--- Incoming ---
[u'cv.HOGDescriptor.HOGDescriptor', '', [], []]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor []>

--- Incoming ---
[   u'cv.HOGDescriptor.HOGDescriptor',
    '',
    [],
    [   [u'Size', u'_winSize', u'', []],
        [u'Size', u'_blockSize', u'', []],
        [u'Size', u'_blockStride', u'', []],
        [u'Size', u'_cellSize', u'', []],
        [u'int', u'_nbins', u'', []],
        [u'int', u'_derivAperture', u'1', []],
        [u'double', u'_winSigma', u'-1', []],
        [u'int', u'_histogramNormType', u'HOGDescriptor::L2Hys', []],
        [u'double', u'_L2HysThreshold', u'0.2', []],
        [u'bool', u'_gammaCorrection', u'false', []],
        [u'int', u'_nlevels', u'HOGDescriptor::DEFAULT_NLEVELS', []],
        [u'bool', u'_signedGradient', u'false', []]]]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor [ARG Size _winSize=, ARG Size _blockSize=, ARG Size _blockStride=, ARG Size _cellSize=, ARG int _nbins=, ARG int _derivAperture=1, ARG double _winSigma=-1, ARG int _histogramNormType=HOGDescriptor::L2Hys, ARG double _L2HysThreshold=0.2, ARG bool _gammaCorrection=false, ARG int _nlevels=HOGDescriptor::DEFAULT_NLEVELS, ARG bool _signedGradient=false]>

--- Incoming ---
[   u'cv.HOGDescriptor.HOGDescriptor',
    '',
    [],
    [[u'String', u'filename', u'', []]]]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor [ARG String filename=]>

--- Incoming ---
[u'cv.HOGDescriptor.getDescriptorSize', u'size_t', [], [], u'size_t']
ok: FUNC <size_t cv.HOGDescriptor.getDescriptorSize []>

--- Incoming ---
[u'cv.HOGDescriptor.checkDetectorSize', u'bool', [], [], u'bool']
ok: FUNC <bool cv.HOGDescriptor.checkDetectorSize []>

--- Incoming ---
[u'cv.HOGDescriptor.getWinSigma', u'double', [], [], u'double']
ok: FUNC <double cv.HOGDescriptor.getWinSigma []>

--- Incoming ---
[   u'cv.HOGDescriptor.setSVMDetector',
    u'void',
    [],
    [['Mat', u'_svmdetector', '', []]],
    u'void']
ok: FUNC <void cv.HOGDescriptor.setSVMDetector [ARG Mat _svmdetector=]>

--- Incoming ---
[   u'cv.HOGDescriptor.load',
    u'bool',
    [],
    [   [u'String', u'filename', u'', []],
        [u'String', u'objname', u'String()', []]],
    u'bool']
ok: FUNC <bool cv.HOGDescriptor.load [ARG String filename=, ARG String objname=String()]>

--- Incoming ---
[   u'cv.HOGDescriptor.save',
    u'void',
    [],
    [   [u'String', u'filename', u'', []],
        [u'String', u'objname', u'String()', []]],
    u'void']
ok: FUNC <void cv.HOGDescriptor.save [ARG String filename=, ARG String objname=String()]>

--- Incoming ---
[   u'cv.HOGDescriptor.compute',
    u'void',
    [],
    [   ['Mat', u'img', '', []],
        [u'vector_float', u'descriptors', u'', ['/O']],
        [u'Size', u'winStride', u'Size()', []],
        [u'Size', u'padding', u'Size()', []],
        [u'vector_Point', u'locations', u'std::vector<Point>()', []]],
    u'void']
ok: FUNC <void cv.HOGDescriptor.compute [ARG Mat img=, ARG vector_float descriptors=, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point locations=std::vector<Point>()]>

--- Incoming ---
[   u'cv.HOGDescriptor.detect',
    u'void',
    [],
    [   [u'Mat', u'img', u'', []],
        [u'vector_Point', u'foundLocations', u'', ['/O']],
        [u'vector_double', u'weights', u'', ['/O']],
        [u'double', u'hitThreshold', u'0', []],
        [u'Size', u'winStride', u'Size()', []],
        [u'Size', u'padding', u'Size()', []],
        [u'vector_Point', u'searchLocations', u'std::vector<Point>()', []]],
    u'void']
ok: FUNC <void cv.HOGDescriptor.detect [ARG Mat img=, ARG vector_Point foundLocations=, ARG vector_double weights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point searchLocations=std::vector<Point>()]>

--- Incoming ---
[   u'cv.HOGDescriptor.detectMultiScale',
    u'void',
    [],
    [   ['Mat', u'img', '', []],
        [u'vector_Rect', u'foundLocations', u'', ['/O']],
        [u'vector_double', u'foundWeights', u'', ['/O']],
        [u'double', u'hitThreshold', u'0', []],
        [u'Size', u'winStride', u'Size()', []],
        [u'Size', u'padding', u'Size()', []],
        [u'double', u'scale', u'1.05', []],
        [u'double', u'finalThreshold', u'2.0', []],
        [u'bool', u'useMeanshiftGrouping', u'false', []]],
    u'void']
ok: FUNC <void cv.HOGDescriptor.detectMultiScale [ARG Mat img=, ARG vector_Rect foundLocations=, ARG vector_double foundWeights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG double scale=1.05, ARG double finalThreshold=2.0, ARG bool useMeanshiftGrouping=false]>

--- Incoming ---
[   u'cv.HOGDescriptor.computeGradient',
    u'void',
    [],
    [   [u'Mat', u'img', u'', []],
        [u'Mat', u'grad', u'', ['/O']],
        [u'Mat', u'angleOfs', u'', ['/O']],
        [u'Size', u'paddingTL', u'Size()', []],
        [u'Size', u'paddingBR', u'Size()', []]],
    u'void']
ok: FUNC <void cv.HOGDescriptor.computeGradient [ARG Mat img=, ARG Mat grad=, ARG Mat angleOfs=, ARG Size paddingTL=Size(), ARG Size paddingBR=Size()]>

--- Incoming ---
[   u'cv.HOGDescriptor.getDefaultPeopleDetector',
    u'vector_float',
    ['/S'],
    [],
    u'std::vector<float>']
ok: FUNC <vector_float cv.HOGDescriptor.getDefaultPeopleDetector []>

--- Incoming ---
[   u'cv.HOGDescriptor.getDaimlerPeopleDetector',
    u'vector_float',
    ['/S'],
    [],
    u'std::vector<float>']
ok: FUNC <vector_float cv.HOGDescriptor.getDaimlerPeopleDetector []>


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/objdetect/include/opencv2/objdetect/detection_based_tracker.hpp =====
Namespaces: set(['', u'cv'])

--- Incoming ---
[u'const cv.DetectionBasedTracker.DETECTED_NOT_SHOWN_YET', '0', [], []]
class not found: CONST DETECTED_NOT_SHOWN_YET=0

--- Incoming ---
[u'const cv.DetectionBasedTracker.DETECTED', '1', [], []]
class not found: CONST DETECTED=1

--- Incoming ---
[u'const cv.DetectionBasedTracker.DETECTED_TEMPORARY_LOST', '2', [], []]
class not found: CONST DETECTED_TEMPORARY_LOST=2

--- Incoming ---
[u'const cv.DetectionBasedTracker.WRONG_OBJECT', '3', [], []]
class not found: CONST WRONG_OBJECT=3


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/objdetect/include/opencv2/objdetect/objdetect.hpp =====
Namespaces: set(['', u'cv'])
Ignore header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/objdetect/include/opencv2/objdetect/objdetect.hpp


===== Generating... =====
CLASS cv::.CascadeClassifier : 
FUNC < cv.CascadeClassifier.CascadeClassifier [ARG String filename=]>
java:  CascadeClassifier(String filename)
FUNC < cv.CascadeClassifier.CascadeClassifier []>
java:  CascadeClassifier()
FUNC <Size cv.CascadeClassifier.getOriginalWindowSize []>
java: Size getOriginalWindowSize()
FUNC <bool cv.CascadeClassifier.convert [ARG String oldcascade=, ARG String newcascade=]>
java: boolean convert(String oldcascade, String newcascade)
FUNC <bool cv.CascadeClassifier.empty []>
java: boolean empty()
FUNC <bool cv.CascadeClassifier.isOldFormatCascade []>
java: boolean isOldFormatCascade()
FUNC <bool cv.CascadeClassifier.load [ARG String filename=]>
java: boolean load(String filename)
FUNC <bool cv.CascadeClassifier.read [ARG FileNode node=]>
SKIP:bool read(FileNode node)	 due to ARG typeFileNode/I
FUNC <int cv.CascadeClassifier.getFeatureType []>
java: int getFeatureType()
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)
java: void detectMultiScale(Mat image, MatOfRect objects)
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int numDetections=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections)
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int rejectLevels=, ARG vector_double levelWeights=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size(), ARG bool outputRejectLevels=false]>
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize, boolean outputRejectLevels)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights)
CLASS cv::.BaseCascadeClassifier : Algorithm
CLASS cv::.HOGDescriptor : 
[CONST L2Hys=0, CONST DEFAULT_NLEVELS=64]
FUNC < cv.HOGDescriptor.HOGDescriptor [ARG Size _winSize=, ARG Size _blockSize=, ARG Size _blockStride=, ARG Size _cellSize=, ARG int _nbins=, ARG int _derivAperture=1, ARG double _winSigma=-1, ARG int _histogramNormType=HOGDescriptor::L2Hys, ARG double _L2HysThreshold=0.2, ARG bool _gammaCorrection=false, ARG int _nlevels=HOGDescriptor::DEFAULT_NLEVELS, ARG bool _signedGradient=false]>
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold, boolean _gammaCorrection, int _nlevels, boolean _signedGradient)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins)
FUNC < cv.HOGDescriptor.HOGDescriptor [ARG String filename=]>
java:  HOGDescriptor(String filename)
FUNC < cv.HOGDescriptor.HOGDescriptor []>
java:  HOGDescriptor()
FUNC <bool cv.HOGDescriptor.checkDetectorSize []>
java: boolean checkDetectorSize()
FUNC <bool cv.HOGDescriptor.load [ARG String filename=, ARG String objname=String()]>
java: boolean load(String filename, String objname)
java: boolean load(String filename)
FUNC <double cv.HOGDescriptor.getWinSigma []>
java: double getWinSigma()
FUNC <size_t cv.HOGDescriptor.getDescriptorSize []>
java: long getDescriptorSize()
FUNC <vector_float cv.HOGDescriptor.getDaimlerPeopleDetector []>
java: MatOfFloat getDaimlerPeopleDetector()
FUNC <vector_float cv.HOGDescriptor.getDefaultPeopleDetector []>
java: MatOfFloat getDefaultPeopleDetector()
FUNC <void cv.HOGDescriptor.compute [ARG Mat img=, ARG vector_float descriptors=, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point locations=std::vector<Point>()]>
java: void compute(Mat img, MatOfFloat descriptors, Size winStride, Size padding, MatOfPoint locations)
java: void compute(Mat img, MatOfFloat descriptors)
FUNC <void cv.HOGDescriptor.computeGradient [ARG Mat img=, ARG Mat grad=, ARG Mat angleOfs=, ARG Size paddingTL=Size(), ARG Size paddingBR=Size()]>
java: void computeGradient(Mat img, Mat grad, Mat angleOfs, Size paddingTL, Size paddingBR)
java: void computeGradient(Mat img, Mat grad, Mat angleOfs)
FUNC <void cv.HOGDescriptor.detect [ARG Mat img=, ARG vector_Point foundLocations=, ARG vector_double weights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point searchLocations=std::vector<Point>()]>
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold, Size winStride, Size padding, MatOfPoint searchLocations)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights)
FUNC <void cv.HOGDescriptor.detectMultiScale [ARG Mat img=, ARG vector_Rect foundLocations=, ARG vector_double foundWeights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG double scale=1.05, ARG double finalThreshold=2.0, ARG bool useMeanshiftGrouping=false]>
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding, double scale, double finalThreshold, boolean useMeanshiftGrouping)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights)
FUNC <void cv.HOGDescriptor.save [ARG String filename=, ARG String objname=String()]>
java: void save(String filename, String objname)
java: void save(String filename)
FUNC <void cv.HOGDescriptor.setSVMDetector [ARG Mat _svmdetector=]>
java: void setSVMDetector(Mat _svmdetector)
FUNC <Size cv.HOGDescriptor.get_winSize []>
java: Size get_winSize()
FUNC <Size cv.HOGDescriptor.get_blockSize []>
java: Size get_blockSize()
FUNC <Size cv.HOGDescriptor.get_blockStride []>
java: Size get_blockStride()
FUNC <Size cv.HOGDescriptor.get_cellSize []>
java: Size get_cellSize()
FUNC <int cv.HOGDescriptor.get_nbins []>
java: int get_nbins()
FUNC <int cv.HOGDescriptor.get_derivAperture []>
java: int get_derivAperture()
FUNC <double cv.HOGDescriptor.get_winSigma []>
java: double get_winSigma()
FUNC <int cv.HOGDescriptor.get_histogramNormType []>
java: int get_histogramNormType()
FUNC <double cv.HOGDescriptor.get_L2HysThreshold []>
java: double get_L2HysThreshold()
FUNC <bool cv.HOGDescriptor.get_gammaCorrection []>
java: boolean get_gammaCorrection()
FUNC <vector_float cv.HOGDescriptor.get_svmDetector []>
java: MatOfFloat get_svmDetector()
FUNC <int cv.HOGDescriptor.get_nlevels []>
java: int get_nlevels()
FUNC <bool cv.HOGDescriptor.get_signedGradient []>
java: boolean get_signedGradient()
CLASS ::.Objdetect : 
[CONST CASCADE_DO_CANNY_PRUNING=1, CONST CASCADE_SCALE_IMAGE=2, CONST CASCADE_FIND_BIGGEST_OBJECT=4, CONST CASCADE_DO_ROUGH_SEARCH=8]
FUNC <void cv..groupRectangles [ARG vector_Rect rectList=, ARG vector_int weights=, ARG int groupThreshold=, ARG double eps=0.2]>
java: void groupRectangles(MatOfRect rectList, MatOfInt weights, int groupThreshold, double eps)
java: void groupRectangles(MatOfRect rectList, MatOfInt weights, int groupThreshold)
