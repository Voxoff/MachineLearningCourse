ok: class CLASS ::.Imgcodecs : , name: Imgcodecs, base: 


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs_c.h =====
Namespaces: set([''])

--- Incoming ---
[u'const CV_LOAD_IMAGE_UNCHANGED', u'-1', [], []]
ok: CONST CV_LOAD_IMAGE_UNCHANGED=-1

--- Incoming ---
[u'const CV_LOAD_IMAGE_GRAYSCALE', u'0', [], []]
ok: CONST CV_LOAD_IMAGE_GRAYSCALE=0

--- Incoming ---
[u'const CV_LOAD_IMAGE_COLOR', u'1', [], []]
ok: CONST CV_LOAD_IMAGE_COLOR=1

--- Incoming ---
[u'const CV_LOAD_IMAGE_ANYDEPTH', u'2', [], []]
ok: CONST CV_LOAD_IMAGE_ANYDEPTH=2

--- Incoming ---
[u'const CV_LOAD_IMAGE_ANYCOLOR', u'4', [], []]
ok: CONST CV_LOAD_IMAGE_ANYCOLOR=4

--- Incoming ---
[u'const CV_LOAD_IMAGE_IGNORE_ORIENTATION', u'128', [], []]
ok: CONST CV_LOAD_IMAGE_IGNORE_ORIENTATION=128

--- Incoming ---
[u'const CV_IMWRITE_JPEG_QUALITY', u'1', [], []]
ok: CONST CV_IMWRITE_JPEG_QUALITY=1

--- Incoming ---
[u'const CV_IMWRITE_JPEG_PROGRESSIVE', u'2', [], []]
ok: CONST CV_IMWRITE_JPEG_PROGRESSIVE=2

--- Incoming ---
[u'const CV_IMWRITE_JPEG_OPTIMIZE', u'3', [], []]
ok: CONST CV_IMWRITE_JPEG_OPTIMIZE=3

--- Incoming ---
[u'const CV_IMWRITE_JPEG_RST_INTERVAL', u'4', [], []]
ok: CONST CV_IMWRITE_JPEG_RST_INTERVAL=4

--- Incoming ---
[u'const CV_IMWRITE_JPEG_LUMA_QUALITY', u'5', [], []]
ok: CONST CV_IMWRITE_JPEG_LUMA_QUALITY=5

--- Incoming ---
[u'const CV_IMWRITE_JPEG_CHROMA_QUALITY', u'6', [], []]
ok: CONST CV_IMWRITE_JPEG_CHROMA_QUALITY=6

--- Incoming ---
[u'const CV_IMWRITE_PNG_COMPRESSION', u'16', [], []]
ok: CONST CV_IMWRITE_PNG_COMPRESSION=16

--- Incoming ---
[u'const CV_IMWRITE_PNG_STRATEGY', u'17', [], []]
ok: CONST CV_IMWRITE_PNG_STRATEGY=17

--- Incoming ---
[u'const CV_IMWRITE_PNG_BILEVEL', u'18', [], []]
ok: CONST CV_IMWRITE_PNG_BILEVEL=18

--- Incoming ---
[u'const CV_IMWRITE_PNG_STRATEGY_DEFAULT', u'0', [], []]
ok: CONST CV_IMWRITE_PNG_STRATEGY_DEFAULT=0

--- Incoming ---
[u'const CV_IMWRITE_PNG_STRATEGY_FILTERED', u'1', [], []]
ok: CONST CV_IMWRITE_PNG_STRATEGY_FILTERED=1

--- Incoming ---
[u'const CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY', u'2', [], []]
ok: CONST CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2

--- Incoming ---
[u'const CV_IMWRITE_PNG_STRATEGY_RLE', u'3', [], []]
ok: CONST CV_IMWRITE_PNG_STRATEGY_RLE=3

--- Incoming ---
[u'const CV_IMWRITE_PNG_STRATEGY_FIXED', u'4', [], []]
ok: CONST CV_IMWRITE_PNG_STRATEGY_FIXED=4

--- Incoming ---
[u'const CV_IMWRITE_PXM_BINARY', u'32', [], []]
ok: CONST CV_IMWRITE_PXM_BINARY=32

--- Incoming ---
[u'const CV_IMWRITE_WEBP_QUALITY', u'64', [], []]
ok: CONST CV_IMWRITE_WEBP_QUALITY=64

--- Incoming ---
[u'const CV_IMWRITE_PAM_TUPLETYPE', u'128', [], []]
ok: CONST CV_IMWRITE_PAM_TUPLETYPE=128

--- Incoming ---
[u'const CV_IMWRITE_PAM_FORMAT_NULL', u'0', [], []]
ok: CONST CV_IMWRITE_PAM_FORMAT_NULL=0

--- Incoming ---
[u'const CV_IMWRITE_PAM_FORMAT_BLACKANDWHITE', u'1', [], []]
ok: CONST CV_IMWRITE_PAM_FORMAT_BLACKANDWHITE=1

--- Incoming ---
[u'const CV_IMWRITE_PAM_FORMAT_GRAYSCALE', u'2', [], []]
ok: CONST CV_IMWRITE_PAM_FORMAT_GRAYSCALE=2

--- Incoming ---
[u'const CV_IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA', u'3', [], []]
ok: CONST CV_IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3

--- Incoming ---
[u'const CV_IMWRITE_PAM_FORMAT_RGB', u'4', [], []]
ok: CONST CV_IMWRITE_PAM_FORMAT_RGB=4

--- Incoming ---
[u'const CV_IMWRITE_PAM_FORMAT_RGB_ALPHA', u'5', [], []]
ok: CONST CV_IMWRITE_PAM_FORMAT_RGB_ALPHA=5

--- Incoming ---
[u'const CV_CVTIMG_FLIP', u'1', [], []]
ok: CONST CV_CVTIMG_FLIP=1

--- Incoming ---
[u'const CV_CVTIMG_SWAP_RB', u'2', [], []]
ok: CONST CV_CVTIMG_SWAP_RB=2


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/imgcodecs/include/opencv2/imgcodecs/ios.h =====
Namespaces: set([''])
Ignore header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/imgcodecs/include/opencv2/imgcodecs/ios.h


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/imgcodecs/include/opencv2/imgcodecs.hpp =====
Namespaces: set(['', u'cv'])

--- Incoming ---
[u'const cv.IMREAD_UNCHANGED', u'-1', [], []]
ok: CONST IMREAD_UNCHANGED=-1

--- Incoming ---
[u'const cv.IMREAD_GRAYSCALE', u'0', [], []]
ok: CONST IMREAD_GRAYSCALE=0

--- Incoming ---
[u'const cv.IMREAD_COLOR', u'1', [], []]
ok: CONST IMREAD_COLOR=1

--- Incoming ---
[u'const cv.IMREAD_ANYDEPTH', u'2', [], []]
ok: CONST IMREAD_ANYDEPTH=2

--- Incoming ---
[u'const cv.IMREAD_ANYCOLOR', u'4', [], []]
ok: CONST IMREAD_ANYCOLOR=4

--- Incoming ---
[u'const cv.IMREAD_LOAD_GDAL', u'8', [], []]
ok: CONST IMREAD_LOAD_GDAL=8

--- Incoming ---
[u'const cv.IMREAD_REDUCED_GRAYSCALE_2', u'16', [], []]
ok: CONST IMREAD_REDUCED_GRAYSCALE_2=16

--- Incoming ---
[u'const cv.IMREAD_REDUCED_COLOR_2', u'17', [], []]
ok: CONST IMREAD_REDUCED_COLOR_2=17

--- Incoming ---
[u'const cv.IMREAD_REDUCED_GRAYSCALE_4', u'32', [], []]
ok: CONST IMREAD_REDUCED_GRAYSCALE_4=32

--- Incoming ---
[u'const cv.IMREAD_REDUCED_COLOR_4', u'33', [], []]
ok: CONST IMREAD_REDUCED_COLOR_4=33

--- Incoming ---
[u'const cv.IMREAD_REDUCED_GRAYSCALE_8', u'64', [], []]
ok: CONST IMREAD_REDUCED_GRAYSCALE_8=64

--- Incoming ---
[u'const cv.IMREAD_REDUCED_COLOR_8', u'65', [], []]
ok: CONST IMREAD_REDUCED_COLOR_8=65

--- Incoming ---
[u'const cv.IMREAD_IGNORE_ORIENTATION', u'128', [], []]
ok: CONST IMREAD_IGNORE_ORIENTATION=128

--- Incoming ---
[u'const cv.IMWRITE_JPEG_QUALITY', u'1', [], []]
ok: CONST IMWRITE_JPEG_QUALITY=1

--- Incoming ---
[u'const cv.IMWRITE_JPEG_PROGRESSIVE', u'2', [], []]
ok: CONST IMWRITE_JPEG_PROGRESSIVE=2

--- Incoming ---
[u'const cv.IMWRITE_JPEG_OPTIMIZE', u'3', [], []]
ok: CONST IMWRITE_JPEG_OPTIMIZE=3

--- Incoming ---
[u'const cv.IMWRITE_JPEG_RST_INTERVAL', u'4', [], []]
ok: CONST IMWRITE_JPEG_RST_INTERVAL=4

--- Incoming ---
[u'const cv.IMWRITE_JPEG_LUMA_QUALITY', u'5', [], []]
ok: CONST IMWRITE_JPEG_LUMA_QUALITY=5

--- Incoming ---
[u'const cv.IMWRITE_JPEG_CHROMA_QUALITY', u'6', [], []]
ok: CONST IMWRITE_JPEG_CHROMA_QUALITY=6

--- Incoming ---
[u'const cv.IMWRITE_PNG_COMPRESSION', u'16', [], []]
ok: CONST IMWRITE_PNG_COMPRESSION=16

--- Incoming ---
[u'const cv.IMWRITE_PNG_STRATEGY', u'17', [], []]
ok: CONST IMWRITE_PNG_STRATEGY=17

--- Incoming ---
[u'const cv.IMWRITE_PNG_BILEVEL', u'18', [], []]
ok: CONST IMWRITE_PNG_BILEVEL=18

--- Incoming ---
[u'const cv.IMWRITE_PXM_BINARY', u'32', [], []]
ok: CONST IMWRITE_PXM_BINARY=32

--- Incoming ---
[u'const cv.IMWRITE_WEBP_QUALITY', u'64', [], []]
ok: CONST IMWRITE_WEBP_QUALITY=64

--- Incoming ---
[u'const cv.IMWRITE_PAM_TUPLETYPE', u'128', [], []]
ok: CONST IMWRITE_PAM_TUPLETYPE=128

--- Incoming ---
[u'const cv.IMWRITE_PNG_STRATEGY_DEFAULT', u'0', [], []]
ok: CONST IMWRITE_PNG_STRATEGY_DEFAULT=0

--- Incoming ---
[u'const cv.IMWRITE_PNG_STRATEGY_FILTERED', u'1', [], []]
ok: CONST IMWRITE_PNG_STRATEGY_FILTERED=1

--- Incoming ---
[u'const cv.IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY', u'2', [], []]
ok: CONST IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2

--- Incoming ---
[u'const cv.IMWRITE_PNG_STRATEGY_RLE', u'3', [], []]
ok: CONST IMWRITE_PNG_STRATEGY_RLE=3

--- Incoming ---
[u'const cv.IMWRITE_PNG_STRATEGY_FIXED', u'4', [], []]
ok: CONST IMWRITE_PNG_STRATEGY_FIXED=4

--- Incoming ---
[u'const cv.IMWRITE_PAM_FORMAT_NULL', u'0', [], []]
ok: CONST IMWRITE_PAM_FORMAT_NULL=0

--- Incoming ---
[u'const cv.IMWRITE_PAM_FORMAT_BLACKANDWHITE', u'1', [], []]
ok: CONST IMWRITE_PAM_FORMAT_BLACKANDWHITE=1

--- Incoming ---
[u'const cv.IMWRITE_PAM_FORMAT_GRAYSCALE', u'2', [], []]
ok: CONST IMWRITE_PAM_FORMAT_GRAYSCALE=2

--- Incoming ---
[u'const cv.IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA', u'3', [], []]
ok: CONST IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3

--- Incoming ---
[u'const cv.IMWRITE_PAM_FORMAT_RGB', u'4', [], []]
ok: CONST IMWRITE_PAM_FORMAT_RGB=4

--- Incoming ---
[u'const cv.IMWRITE_PAM_FORMAT_RGB_ALPHA', u'5', [], []]
ok: CONST IMWRITE_PAM_FORMAT_RGB_ALPHA=5

--- Incoming ---
[   u'cv.imread',
    u'Mat',
    [],
    [   [u'String', u'filename', u'', []],
        [u'int', u'flags', u'IMREAD_COLOR', []]],
    u'Mat']
ok: FUNC <Mat cv..imread [ARG String filename=, ARG int flags=IMREAD_COLOR]>

--- Incoming ---
[   u'cv.imreadmulti',
    u'bool',
    [],
    [   [u'String', u'filename', u'', []],
        [u'vector_Mat', u'mats', u'', []],
        [u'int', u'flags', u'IMREAD_ANYCOLOR', []]],
    u'bool']
ok: FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int flags=IMREAD_ANYCOLOR]>

--- Incoming ---
[   u'cv.imwrite',
    u'bool',
    [],
    [   [u'String', u'filename', u'', []],
        ['Mat', u'img', '', []],
        [u'vector_int', u'params', u'std::vector<int>()', []]],
    u'bool']
ok: FUNC <bool cv..imwrite [ARG String filename=, ARG Mat img=, ARG vector_int params=std::vector<int>()]>

--- Incoming ---
[   u'cv.imdecode',
    u'Mat',
    [],
    [['Mat', u'buf', '', []], [u'int', u'flags', u'', []]],
    u'Mat']
ok: FUNC <Mat cv..imdecode [ARG Mat buf=, ARG int flags=]>

--- Incoming ---
[   u'cv.imencode',
    u'bool',
    [],
    [   [u'String', u'ext', u'', []],
        ['Mat', u'img', '', []],
        [u'vector_uchar', u'buf', u'', ['/O']],
        [u'vector_int', u'params', u'std::vector<int>()', []]],
    u'bool']
ok: FUNC <bool cv..imencode [ARG String ext=, ARG Mat img=, ARG vector_uchar buf=, ARG vector_int params=std::vector<int>()]>


===== Header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs.hpp =====
Namespaces: set(['', u'cv'])
Ignore header: /home/guy/code/Voxoff/machineLearning/tesseract/python/OpenCV/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs.hpp


===== Generating... =====
CLASS ::.Imgcodecs : 
[CONST CV_LOAD_IMAGE_UNCHANGED=-1, CONST CV_LOAD_IMAGE_GRAYSCALE=0, CONST CV_LOAD_IMAGE_COLOR=1, CONST CV_LOAD_IMAGE_ANYDEPTH=2, CONST CV_LOAD_IMAGE_ANYCOLOR=4, CONST CV_LOAD_IMAGE_IGNORE_ORIENTATION=128, CONST CV_IMWRITE_JPEG_QUALITY=1, CONST CV_IMWRITE_JPEG_PROGRESSIVE=2, CONST CV_IMWRITE_JPEG_OPTIMIZE=3, CONST CV_IMWRITE_JPEG_RST_INTERVAL=4, CONST CV_IMWRITE_JPEG_LUMA_QUALITY=5, CONST CV_IMWRITE_JPEG_CHROMA_QUALITY=6, CONST CV_IMWRITE_PNG_COMPRESSION=16, CONST CV_IMWRITE_PNG_STRATEGY=17, CONST CV_IMWRITE_PNG_BILEVEL=18, CONST CV_IMWRITE_PNG_STRATEGY_DEFAULT=0, CONST CV_IMWRITE_PNG_STRATEGY_FILTERED=1, CONST CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2, CONST CV_IMWRITE_PNG_STRATEGY_RLE=3, CONST CV_IMWRITE_PNG_STRATEGY_FIXED=4, CONST CV_IMWRITE_PXM_BINARY=32, CONST CV_IMWRITE_WEBP_QUALITY=64, CONST CV_IMWRITE_PAM_TUPLETYPE=128, CONST CV_IMWRITE_PAM_FORMAT_NULL=0, CONST CV_IMWRITE_PAM_FORMAT_BLACKANDWHITE=1, CONST CV_IMWRITE_PAM_FORMAT_GRAYSCALE=2, CONST CV_IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3, CONST CV_IMWRITE_PAM_FORMAT_RGB=4, CONST CV_IMWRITE_PAM_FORMAT_RGB_ALPHA=5, CONST CV_CVTIMG_FLIP=1, CONST CV_CVTIMG_SWAP_RB=2, CONST IMREAD_UNCHANGED=-1, CONST IMREAD_GRAYSCALE=0, CONST IMREAD_COLOR=1, CONST IMREAD_ANYDEPTH=2, CONST IMREAD_ANYCOLOR=4, CONST IMREAD_LOAD_GDAL=8, CONST IMREAD_REDUCED_GRAYSCALE_2=16, CONST IMREAD_REDUCED_COLOR_2=17, CONST IMREAD_REDUCED_GRAYSCALE_4=32, CONST IMREAD_REDUCED_COLOR_4=33, CONST IMREAD_REDUCED_GRAYSCALE_8=64, CONST IMREAD_REDUCED_COLOR_8=65, CONST IMREAD_IGNORE_ORIENTATION=128, CONST IMWRITE_JPEG_QUALITY=1, CONST IMWRITE_JPEG_PROGRESSIVE=2, CONST IMWRITE_JPEG_OPTIMIZE=3, CONST IMWRITE_JPEG_RST_INTERVAL=4, CONST IMWRITE_JPEG_LUMA_QUALITY=5, CONST IMWRITE_JPEG_CHROMA_QUALITY=6, CONST IMWRITE_PNG_COMPRESSION=16, CONST IMWRITE_PNG_STRATEGY=17, CONST IMWRITE_PNG_BILEVEL=18, CONST IMWRITE_PXM_BINARY=32, CONST IMWRITE_WEBP_QUALITY=64, CONST IMWRITE_PAM_TUPLETYPE=128, CONST IMWRITE_PNG_STRATEGY_DEFAULT=0, CONST IMWRITE_PNG_STRATEGY_FILTERED=1, CONST IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2, CONST IMWRITE_PNG_STRATEGY_RLE=3, CONST IMWRITE_PNG_STRATEGY_FIXED=4, CONST IMWRITE_PAM_FORMAT_NULL=0, CONST IMWRITE_PAM_FORMAT_BLACKANDWHITE=1, CONST IMWRITE_PAM_FORMAT_GRAYSCALE=2, CONST IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3, CONST IMWRITE_PAM_FORMAT_RGB=4, CONST IMWRITE_PAM_FORMAT_RGB_ALPHA=5]
FUNC <Mat cv..imdecode [ARG Mat buf=, ARG int flags=]>
java: Mat imdecode(Mat buf, int flags)
FUNC <Mat cv..imread [ARG String filename=, ARG int flags=IMREAD_COLOR]>
java: Mat imread(String filename, int flags)
java: Mat imread(String filename)
FUNC <bool cv..imencode [ARG String ext=, ARG Mat img=, ARG vector_uchar buf=, ARG vector_int params=std::vector<int>()]>
java: boolean imencode(String ext, Mat img, MatOfByte buf, MatOfInt params)
java: boolean imencode(String ext, Mat img, MatOfByte buf)
FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int flags=IMREAD_ANYCOLOR]>
java: boolean imreadmulti(String filename, List<Mat> mats, int flags)
java: boolean imreadmulti(String filename, List<Mat> mats)
FUNC <bool cv..imwrite [ARG String filename=, ARG Mat img=, ARG vector_int params=std::vector<int>()]>
java: boolean imwrite(String filename, Mat img, MatOfInt params)
java: boolean imwrite(String filename, Mat img)
